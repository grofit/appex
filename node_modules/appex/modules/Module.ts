// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../interfaces.ts" />
/// <reference path="../references.ts" />
/// <reference path="../compiler/CompilerResult.ts" />
/// <reference path="Reflection.ts" />
/// <reference path="ModuleExport.ts" />
/// <reference path="IModule.ts" />

module appex.modules {
    
    export class Cascade {
    
        public name  : string;

        public value : any;
    }

    /** A vm and object mapping over a javascript module compiled with the appex compiler */
    export class Module implements appex.modules.IModule {
        
        /** exported javascript objects */
        public exports     : appex.modules.ModuleExport[];

        /** the vm context. (exported objects accessible on context.exports) */
        public context     : any;

        /** the javascript this module is mapping */
        public javascript  : string;

        /** type reflection meta data for this module */
        public reflection  : appex.modules.Reflection;

        /** compiler diagnostics for this module. */
        public diagnostics : typescript.api.Diagnostic[];

        /** (experimental) attributes defined in this module. */
        public cascades    : appex.modules.Cascade[];

        /** arguments
        *       compilerResult - a compilation result from the appex compiler
        */
        constructor (compilerResult:appex.compiler.CompilerResult) {  
            
            this.javascript  = compilerResult.javascript;

            this.diagnostics = compilerResult.diagnostics;

            this.reflection  = new appex.modules.Reflection(compilerResult.scripts);

            this.cascades    = [];

            this.load_vm();

            this.load_exports();
        }
        
        /** loads the module into a vm */
        private load_vm   () : void {

            var that = this;

            // create context
            this.context = {	

                __dirname   : node.path.dirname(process.mainModule.filename),

                __filename  : node.path.join(node.path.dirname(process.mainModule.filename), "appex.module.js"),	    

                global	    : global,

                process     : process,

                require     : require,	

                console     : console,

                exports     : {},

                module      : {},
                
                cascade    : (...params: any[]) => { // need to move this somewhere?

                    if(params.length == 1) {
                        
                        var cascade = new Cascade();

                        cascade.name = '';

                        cascade.value = params[0];
                            
                        that.cascades.push(cascade);
                    }

                    if(params.length == 2) {
                        
                        var cascade = new Cascade();

                        cascade.name  = params[0];

                        cascade.value = params[1];
                            
                        that.cascades.push(cascade);

                    }
                }
            };
            
            var script = require("vm").createScript( this.javascript, 'appex.module.js' );

            script.runInNewContext ( this.context );
        }
        
        /** loads the module exports derived from the reflection. */
        private load_exports   () : void {
            
            this.exports    = [];

            var scope       = [];

            for(var n in this.reflection.scripts) {

                this.load_script(this.reflection.scripts[n])
            }
        }
        
        private load_variable  (variable:typescript.api.Variable) : void {
            
            if(variable.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, variable));

            }
        }
        
        private load_parameter (parameter:typescript.api.Parameter) : void {
            
            // unused
        }

        private load_method    (method:typescript.api.Method) : void {
            
            if(method.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, method));

                for(var n in method.parameters) {

                    this.load_parameter (method.parameters[n]);
                }
            }
        }
        
        private load_class     (_class:typescript.api.Class) : void {

            if(_class.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, _class));

                for(var n in _class.methods) {

                    this.load_method( _class.methods[n] );
                }

                for(var n in _class.variables) {

                    this.load_variable( _class.variables[n] );
                }
            }
        }

        private load_interface ( _interface:typescript.api.Interface) : void {

            if(_interface.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, _interface));

                for(var n in _interface.methods) {

                    this.load_method( _interface.methods[n] );
                }

                for(var n in _interface.variables) {

                    this.load_variable( _interface.variables[n] );
                }
            }
        }

        private load_import    (_import:typescript.api.Import) : void {

            // do nothing......or....maybe run a compile here?    
        }

        private load_module    (_module:typescript.api.Module) : void {
            
            if(_module.isExported) {

                for(var n in _module.modules) {

                    this.load_module( _module.modules[n] );
                }

                for(var n in _module.imports) {

                    this.load_import( _module.imports[n] );
                }

                for(var n in _module.interfaces) {

                    this.load_interface( _module.interfaces[n] );
                } 
                  
                for(var n in _module.classes) {

                    this.load_class( _module.classes[n] );
                }

                for(var n in _module.methods) {

                    this.load_method( _module.methods[n] );
                }

                for(var n in _module.variables) {

                    this.load_variable( _module.variables[n] );
                }
            }
        }

        private load_script    (script:typescript.api.Script) : void {

            for(var n in script.modules) {

                this.load_module( script.modules[n] );
            }

            for(var n in script.interfaces) {

                this.load_interface( script.interfaces[n] );
            } 
                  
            for(var n in script.classes) {

                this.load_class( script.classes[n] );
            }

            for(var n in script.methods) {

                this.load_method( script.methods[n] );
            }

            for(var n in script.variables) {

                this.load_variable( script.variables[n] );
            }
        } 

        /** disposes of this module (cleaning up the vm) */
        public dispose(): void {
    
            this.context = null; // does this work?
        }
    }
}
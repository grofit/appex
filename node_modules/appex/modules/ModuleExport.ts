// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="IModule.ts" />
/// <reference path="IModuleExport.ts" />

module appex.modules {

    /** A container for javascript objects exported on a module. */
    export class ModuleExport implements appex.modules.IModuleExport {
        
        public module             : appex.modules.IModule;

        public type               : typescript.api.ReflectedType;

        private _accessor         : any;

        private _cascade          : any;

        private _accessor_checked : boolean;

        private _cascade_checked  : boolean;

        /** arguments:
        *       module - the appex module this export is mapping.
        *       type   - the reflected typed information for the object being exported.
        */
        constructor(module : appex.modules.IModule, type : typescript.api.ReflectedType) { 

            this.module             = module;

            this.type               = type;
        
            this._accessor          = null;

            this._accessor_checked  = false;

            this._cascade           = null;

            this._cascade_checked   = false;
        }
        
        /** returns cascading properies on this export. */
        public cascade () : any {

            var that = this;

            // utility to lookup cascade values on the parent module.
            var lookup = function(qualifier:string) {
                
                var _cascades = that.module.cascades.slice(0);

                for(var n in _cascades) {
                    
                    if(_cascades[n].name == qualifier) {

                        return require('util')._extend({}, _cascades[n].value); // clone
                    }
                }

                return null;
            }
            
            // if already checked, return.
            if(this._cascade_checked) 
            {    
                return this._cascade;
            }
            else 
            {

                var scope = this.type.scope;

                if(scope.length > 0) {

                    if(scope[0].indexOf('"') !== -1) {
                    
                        scope = scope.slice(1);
                    }
                }

                scope.push(this.type.name);

                var _cascade = lookup('');
                 
                if(_cascade == null) {
                
                    _cascade = {};
                }

                var stack = [];

                for(var n in scope) {
                
                    stack.push(scope[n]);
                
                    var qualifier = stack.join('.');
                    
                    var obj = lookup(qualifier);

                    if(obj) {
                    
                        for(var m in obj) {
                            
                            _cascade[m] = obj[m];
                        }
                    } 
                }
                
                this._cascade = _cascade;

                this._cascade_checked = true;

                return _cascade;
            }
        }

        /** returns a accessor handle to the exported javascript object */
        public accessor() : any {
            
            if(this._accessor_checked) 
            {
                return this._accessor;
            }
            else 
            {
                if(this.module != null) {

                    if(this.module.context != null) {
                
                        if(this.module.context.exports != null) {
                    
                            var accessor : any = this.module.context.exports;
            
                            var scope:string[] = this.type.scope;

                            if(scope.length > 0) {

                                if(scope[0].indexOf('"') !== -1) {
                    
                                    scope = scope.slice(1);
                                }
                            }
                        
                            for(var n in scope) {
                            
                                accessor = accessor[scope[n]];

                                if(accessor == null) 
                                {
                                    this._accessor_checked = true;

                                    return null;
                                }
                            }

                            if(accessor[this.type.name]) {
                            
                                this._accessor = accessor[this.type.name];

                                return this._accessor;
                            }                
                        }
                    }
                }
            }

            this._accessor_checked = true;

            return null;
        }
    }
}
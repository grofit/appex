/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="IModule.ts" />
/// <reference path="IModuleExport.ts" />

module appex.modules {

    /** A container for javascript objects exported on a module. */
    export class ModuleExport implements appex.modules.IModuleExport {
        
        public module             : appex.modules.IModule;

        public type               : typescript.api.ReflectedType;

        private _accessor         : any;

        private _cascade          : any;

        private _accessor_checked : boolean;

        private _cascade_checked  : boolean;

        /** arguments:
        *       module - the appex module this export is mapping.
        *       type   - the reflected typed information for the object being exported.
        */
        constructor(module : appex.modules.IModule, type : typescript.api.ReflectedType) { 

            this.module             = module;

            this.type               = type;
        
            this._accessor          = null;

            this._accessor_checked  = false;

            this._cascade           = null;

            this._cascade_checked   = false;
        }
        
        /** returns cascading properies on this export. */
        public cascade () : any {

            var that = this;

            // utility to lookup cascade values on the parent module.
            var lookup = function(qualifier:string) {
                
                var _cascades = that.module.cascades.slice(0);

                for(var n in _cascades) {
                    
                    if(_cascades[n].name == qualifier) {

                        return require('util')._extend({}, _cascades[n].value); // clone
                    }
                }

                return null;
            }
            
            // if already checked, return.
            if(this._cascade_checked) 
            {    
                return this._cascade;
            }
            else 
            {

                var scope = this.type.scope;

                if(scope.length > 0) {

                    if(scope[0].indexOf('"') !== -1) {
                    
                        scope = scope.slice(1);
                    }
                }

                scope.push(this.type.name);

                var _cascade = lookup('');
                 
                if(_cascade == null) {
                
                    _cascade = {};
                }

                var stack = [];

                for(var n in scope) {
                
                    stack.push(scope[n]);
                
                    var qualifier = stack.join('.');
                    
                    var obj = lookup(qualifier);

                    if(obj) {
                    
                        for(var m in obj) {
                            
                            _cascade[m] = obj[m];
                        }
                    } 
                }
                
                this._cascade = _cascade;

                this._cascade_checked = true;

                return _cascade;
            }
        }

        /** returns a accessor handle to the exported javascript object */
        public accessor() : any {
            
            if(this._accessor_checked) 
            {
                return this._accessor;
            }
            else 
            {
                if(this.module != null) {

                    if(this.module.context != null) {
                
                        if(this.module.context.exports != null) {
                    
                            var accessor : any = this.module.context.exports;
            
                            var scope:string[] = this.type.scope;

                            if(scope.length > 0) {

                                if(scope[0].indexOf('"') !== -1) {
                    
                                    scope = scope.slice(1);
                                }
                            }
                        
                            for(var n in scope) {
                            
                                accessor = accessor[scope[n]];

                                if(accessor == null) 
                                {
                                    this._accessor_checked = true;

                                    return null;
                                }
                            }

                            if(accessor[this.type.name]) {
                            
                                this._accessor = accessor[this.type.name];

                                return this._accessor;
                            }                
                        }
                    }
                }
            }

            this._accessor_checked = true;

            return null;
        }
    }
}
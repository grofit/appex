/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

module appex.modules {

    /** appex attribute manager. */
    export class AttributeCache {
    
        private values : {name:string; value:any;}[];

        constructor() {

            this.values = [];
        }

        /** set / applies a new value to the attribute
        *   arguments:
        *       name  - the name of the attribute. (lexically scoped and seperated via '.')
        *       value - the object value to apply to this name.
        */
        public set(name:string, value:any) : void {
            
            if(typeof(value) !== 'object') {
                
                throw Error('appex.modules.Attribute: the value passed must be a object type.') 

            }

            this.values.push({name: name, value: value})
        }

        /** returns the aggregated object for specifically for attributes with this name.
        *   arguments:
        *       name  - the name of the property. (lexically scoped and seperated via '.')
        *       returns - the aggregated object for this named attribute.
        */
        public get(name:string) : any {
            
            var result = {}

            var values = this.values.filter((value, index, arr) : boolean => {
                
                return value.name === name;

            })

            for(var j = 0; j < values.length; j++) {
                       
                for(var n in values[j].value) {

                    result[n] = values[j].value[n];
                }
            }        
            
            return result;
        }

        /** returns the lexical scoped aggregated value attributes with this name.
        *   arguments:
        *       name  - the name of the property. (lexically scoped and seperated via '.')
        *       returns - the lexically scoped aggregated object for this named attribute.
        */
        public get_lexical_scoped(name:string) : any {

            var split = name.split('.')

            var qualifier : string = '';

            var result    : any = this.get(qualifier)
            
            for(var i = 0; i < split.length; i++) {
            
                if(i == 0) {

                    qualifier = split[i];

                } else {

                    qualifier += '.' + split[i];

                }

                var _result = this.get(qualifier)
                   
                for(var n in _result) {

                    result[n] = _result[n];
                }
            }

            return result;
        }
    }
}
/// <reference path="../../references.ts" />

module appex.templates.util {

	export class Path 
	{
		public static isAbsoluteUrl (path:string) : boolean 
		{
			var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp[s]?:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");
			
			return regex.test(path);
		}
		
		public static isAbsoluteUrn (path:string) : boolean 
		{
			var regex = new RegExp("^(?:[a-xA-Z]:(/|\))|(?:file://)");
			
			return regex.test(path);	
			
		}
		
		public static isRootRelative(path:string) : boolean 
		{
			return path.indexOf('/') == 0 && path.indexOf('//') != 0;
		}

        public static isAbsolute(path:string) : boolean {
        
            if(!appex.templates.util.Path.isAbsoluteUrl(path)) {
            
                if(!appex.templates.util.Path.isAbsoluteUrn(path)) {
            
                    return false;
                }                
            }

            return true;
		}

		public static isRelative(path:string) : boolean 
		{
			if(!Path.isAbsoluteUrl(path)) 
			{
				if(!Path.isAbsoluteUrn(path)) 
				{
					if(!(path.indexOf('/') == 0)) 
					{
						return true;
					}
				}
			}
			return false;				
		}
		
		public static toForwardSlashes(path:string) : string 
		{
			return path.replace(/\\/gi, "/");
		}
		
		
		public static relativeToAbsolute (absolute_parent_path:string, relative_path:string) : string 
		{
			if( Path.isRelative(relative_path) ) 
			{
				var absolute_parent_directory = node.path.dirname(absolute_parent_path);
				
				return node.path.join(absolute_parent_directory, relative_path);			
			}
			
			return relative_path;
		}

        public static makeAbsolute(path:string) : string {
        
            if(!appex.templates.util.Path.isAbsolute(path)) {
            
                return node.path.resolve('./', path);
            }

            return path;
        }
	}
}
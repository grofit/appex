
/// <reference path="Parser.ts" />

module appex.templates {

    export interface ITemplate {
    
        render(data:any);
    }

    export interface IEngineOptions {
    
        devmode ? : boolean
    }

    export class Engine {

        public templates  : appex.templates.ITemplate[];
            
        constructor(public options : appex.templates.IEngineOptions) {

            if(!options.devmode) {
            
                options.devmode = false;
            }

            this.templates = [];
        }

        public render(filename:string, data:any) : string {
            
            if(this.options.devmode == false) {
                
                if(this.templates[filename]) {

                    var template = <appex.templates.ITemplate>this.templates[filename];

                    return template.render(data);
                }
            }
            
            var parser = new appex.templates.Parser(filename);

            var code   = parser.parse();

            var script = node.vm.createScript(code + ' exports = new template()', filename );

            try
            {
                var context = { exports : {} };

                script.runInNewContext ( context );

                var template = <appex.templates.ITemplate>context.exports;

                var result = template.render(data);      

                this.templates[filename] = template;

                return result;
            }
            catch(e) 
            {
                return e.toString();
            }
        }
    }
}
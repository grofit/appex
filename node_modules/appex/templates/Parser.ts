/// <reference path="util/Path.ts" />
/// <reference path="io/IOSync.ts" />
/// <reference path="Scanner.ts" />

module appex.templates {

    export class Parser {

        public  io                  : appex.templates.io.IOSync;

        public  reference_document  : appex.templates.Document;

        public  document            : appex.templates.Document;

        public  output              : string[];

        constructor(public filename:string) {

            this.output    = [];

            this.io        = new appex.templates.io.IOSync();

            var filename   = appex.templates.util.Path.makeAbsolute(filename);

            var content    = this.io.load( filename );

            this.document  = new appex.templates.Document(filename, content);

            for(var n in this.document.declarations) {
            
                if(this.document.declarations[n].type == 'layout') {
                
                    var layout_declaration = <appex.templates.LayoutDeclaration>this.document.declarations[n];

                    filename = appex.templates.util.Path.relativeToAbsolute(this.document.filename, layout_declaration.filename);

                    var content = this.io.load(filename);

                    this.reference_document = this.document;

                    this.document = new appex.templates.Document(filename, content);

                    return;
                }
            }
        }

        public parse(): string {

            this.write('var template = function() {');

            this.write('    this.buffer = []');

            this.write('    this.write = function(data) {');

            this.write('        this.buffer.push(data.toString())');

            this.write('     }')

            this.write('    this.render = function(context) {');
            
            this.write('        this.buffer = []');

            this.emit(this.document, this.document);
            
            this.write('        return this.buffer.join(\'\')')

            this.write('     }')

            this.write('}');

            return this.output.join('');
        }

        private emit(current_document:appex.templates.Document, declaration:appex.templates.Declaration) : void {

            switch(declaration.type) {

                case 'layout':

                    break;

                case 'render':

                    var render_declaration = <appex.templates.RenderDeclaration>declaration;
                    
                    var filename = appex.templates.util.Path.relativeToAbsolute(current_document.filename, render_declaration.filename);

                    var content = this.io.load( filename );

                    var document = new appex.templates.Document(filename, content);

                    this.emit(document, document);

                    return;

                    break;

                case 'section':

                    var section_declaration = <appex.templates.SectionDeclaration>declaration;

                    if(this.reference_document) {
                    
                        for(var n in this.reference_document.declarations) {
                        
                            if(this.reference_document.declarations[n].type == 'section') {
                            
                                var reference_section_declaration = <appex.templates.SectionDeclaration>this.reference_document.declarations[n];

                                if(reference_section_declaration.name == section_declaration.name) {
                                    
                                    for(var m in reference_section_declaration.declarations) {
                                    
                                        this.emit(this.reference_document, reference_section_declaration.declarations[m]);
                                    }

                                    return;
                                }
                            }
                        }
                    }

                    break;

                case 'for':

                    var for_declaration = <appex.templates.ForDeclaration>declaration;

                    this.write ('        ' + for_declaration.type + for_declaration.expression + '{')
                    
                    break;

                case 'if':
                    
                    var if_declaration = <appex.templates.IfDeclaration>declaration;

                    this.write ('       ' + if_declaration.type + if_declaration.expression + '{')
                    
                    break;

                case 'expression':
                    
                    var expression_declaration = <appex.templates.ExpressionDeclaration>declaration;

                    this.write('        this.write' + expression_declaration.expression);

                    break;

                case 'content':

                    this.write_literal( this.read( current_document, declaration.start, declaration.length ) );

                    break;


            }

            for(var n in declaration.declarations) {
                                    
                this.emit(current_document, declaration.declarations[n]);
            }

            switch(declaration.type) {

                case 'for':

                case 'if':

                    this.write('        }')
                    
                    break;
                
            }
        }

        private read(document:appex.templates.Document, start:number, length:number) : string {
            
            return document.content.substr(start, length);
        }

        private write(content:string) : void {
            
            this.output.push(content + '\n');
        }

        private write_literal(content:string) : void {
        
            content = content.replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/'/g, '\\\'');

            this.write('        this.write(\'' + content + '\')');

            //this.write(content)
        }
    }
}
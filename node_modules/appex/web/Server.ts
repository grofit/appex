/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <referecne path="../references.ts" />
/// <reference path="../interfaces.ts" />
/// <reference path="../compiler/Compiler.ts" />
/// <reference path="../modules/IModule.ts" />
/// <reference path="../modules/Module.ts" />
/// <reference path="media/Mime.ts" />
/// <reference path="routing/IRouter.ts" />
/// <reference path="routing/Router.ts" />
/// <reference path="IContext.ts" />
/// <reference path="Context.ts" />
/// <reference path="IServer.ts" />
/// <reference path="ServerOptions.ts" />
/// <reference path="Waiter.ts" />

module appex.web {

    /** a appex server. JIT once and watch it fly. */
    export class Server implements appex.web.IServer {

        private server                 : http.Server;

        private compiler               : appex.compiler.Compiler;

        private module                 : appex.modules.IModule;

        private router                 : appex.web.routing.IRouter;

        private mime                   : appex.web.media.Mime;

        private waiters                : appex.web.Waiter[];

        private compiled               : boolean;

        private compiling              : boolean;
        
        /** arguments:
        *    options - server start options.
        */
        constructor(public options:appex.web.IServerOptions) {
            
            this.compiler              = new appex.compiler.Compiler();

            this.mime                  = new appex.web.media.Mime();

            this.module                = null;

            this.router                = null;

            this.waiters              = [];

            this.compiling             = false;

            this.compiled              = false;

            this.options.stdout.write('appex \033[32m- server\033[0m\n');         
        }

        /** creates a nodejs http server based on the server options protocol.
         *
         *  arguments:
         *      port - the port to listen on.
         */
        public listen(port:number) : void {
        
            var protocol:any = this.options.protocol == "http" ? node.http : node.https;

            var that = this;

            this.server = protocol.createServer(function(request : http.ServerRequest, response : http.ServerResponse, next : Function) : void {
            
                that.handler(request, response, null);
            });
            
            this.server.listen(port);
        }

        /** the http request handler.
        *   
        *   arguments:
        *       request  - the nodejs http request.
        *       response - the nodejs http response.
        *       next     - (optional) the next callback used for express / connect middleware.
        */  
        public handler (request:http.ServerRequest, response:http.ServerResponse, next?:Function) : void {

            this.waiters.push( new appex.web.Waiter(request, response, next) );
            
            var that = this;

            this.compile(function(diagnostics) {

                if(diagnostics) {
                
                    that.errors(diagnostics);

                    return;
                }

                while(that.waiters.length > 0) {

                    var waiter  = that.waiters.pop();

                    var context = that.load_context(waiter.request, waiter.response, waiter.next);

                    var handled = that.router.handler (context);

                    if(handled) {
                        
                        if(that.options.logging) {

                            var message = [];

                            message.push(context.request.method , ' ');

                            message.push(context.request.url, '\n');

                            that.options.stdout.write(message.join(''));
                        }
                    }
                    else 
                    {    
                        if(context.next) 
                        { 
                            context.next();
                        }
                    }
                }
            });
        }

        /** loads the context.
        *   
        *   arguments:
        *       request  - the nodejs http request
        *       response - the nodejs http response
        *       next     - the next function
        *       returns  - the context
        */   
        private load_context(request:http.ServerRequest, response:http.ServerResponse, next?:Function) : appex.web.IContext {

            var context       = new appex.web.Context();

            // bind in user objects.
            if(this.options.context) {

                for(var n in this.options.context) {
            
                    context[n] = this.options.context[n];
                }
            }

            // bind in context objects.
            context.request   = appex.web.BindRequest(request);

            context.response  = appex.web.BindResponse(response);

            context.next      = function() {};

            context.module    = this.module;

            context.router    = this.router;

            context.mime      = this.mime;

            if(next) {
            
                context.next = next;
            }

            // initialize the cascade.
            context.cascade = {};

            return context;
        }


        /** compiles options.program once and loads the module and router.
        *   
        *   arguments:
        *       callback - a callback containing any diagnostics.
        */ 
        private compile( callback: (diagnostics:typescript.api.Diagnostic[]) => void ): void {
            
            if(!this.compiled) {

                if(!this.compiling) {

                    this.compiling = true;
                
                    var that = this;

                    this.compiler.compile(this.options.program, function(result) {
                    
                        that.compiling = false;

                        if(result.diagnostics.length > 0) {
                    
                            callback(result.diagnostics);

                            return;
                        }
                    
                        that.module     = new appex.modules.Module(result);

                        that.router     = new appex.web.routing.ModuleRouter(that.module);

                        that.compiled   = true;

                        that.compiler.dispose();

                        callback(null);
                    });
                }
            }
            else
            {
                callback(null);
            }   
        }
        /** emits compilation errors to options.stdout and a 500 'internal server error' message to http buffer.
        *   
        *   arguments:
        *       diagnostics - the diagnostics to emit.
        */
        private errors(diagnostics:typescript.api.Diagnostic[]) : void {
        
            while(this.waiters.length > 0) {

                var request = this.waiters.pop ();

                request.response.writeHead(500, {'content-type' : 'text/plain'});

                request.response.write('internal server error.');

                request.response.end();

                for(var n in diagnostics) {
                
                    var diagnostic = diagnostics[n];

                    var message = [];
                            
                    message.push( diagnostic.path )
                            
                    message.push(" [" , (diagnostic.line_index + 1).toString(),  ":" , (diagnostic.char_index + 1).toString() , "] ");
                            
                    message.push(diagnostic.message, '\n');

                    if(this.options.logging) {

                        this.options.stderr.write( message.join('') );
                    }
                }
            }         
        }
        
        /** disposes of this server */
        public dispose(): void {
        
            this.compiler.dispose();

            if(this.module) {
            
                this.module.dispose();
            }
        }
    }
}
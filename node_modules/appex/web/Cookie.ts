// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../references.ts" />
/// <reference path="IRequest.ts" />
/// <reference path="IResponse.ts" />

module appex.web {

    export class ICookieOption {

        maxage   : string;

        domain   : string;

        path     : string;

        expires  : Date;

        httponly : boolean;

        secure   : boolean;    
        
    }

    export class Cookie implements appex.web.ICookieOption {
             
        public maxage   : string;

        public domain   : string;

        public path     : string;

        public expires  : Date;

        public httponly : boolean;

        public secure   : boolean; 

        public name     : string;

        public value    : string;
        
        constructor() {
            
            // todo: cookie implementation.

        }
    }

    export class CookieCollection {

        public cookies : Cookie [];

        constructor() {
        
            this.cookies = [];
        }

        public set(name:string, value:string, option?:appex.web.ICookieOption) : void {
            
            var cookie   = new appex.web.Cookie();

            cookie.name  = name;

            cookie.value = value;

            if(option) {
            
                if(option.maxage)   cookie.maxage   = option.maxage;

                if(option.domain)   cookie.domain   = option.domain;
                
                if(option.path)     cookie.path     = option.path;
                
                if(option.expires)  cookie.expires  = option.expires;
                
                if(option.httponly) cookie.httponly = option.httponly;
                
                if(option.secure)   cookie.secure   = option.secure;
            }

            this.cookies.push(cookie);
        }

        public get (name:string) : appex.web.Cookie {
            
            for(var n in this.cookies) {
            
                if(this.cookies[n].name == name) {
                    
                    return this.cookies[n];
                }
            }
            return null;
        }

        public static read(request:http.ServerRequest) : appex.web.CookieCollection {
        
            var collection = new appex.web.CookieCollection();

            if(request.headers['cookie']) {
                
                // todo: read cookie.
            }

            return collection;
        }

        public write(response:appex.web.IResponse) : void {
            
            var buffer = [];

            for(var n in this.cookies) {

                var cookie = <appex.web.Cookie>this.cookies[n];
                
                var pairs = [cookie.name + '=' + encodeURIComponent(cookie.value)];
                
                if (cookie.maxage)    pairs.push('Max-Age=' + cookie.maxage);
                
                if (cookie.domain)    pairs.push('Domain='  + cookie.domain);
                
                if (cookie.path)      pairs.push('Path='    + cookie.path);
                
                if (cookie.expires)   pairs.push('Expires=' + cookie.expires.toUTCString());
                
                if (cookie.httponly)  pairs.push('HttpOnly');
                
                if (cookie.secure)    pairs.push('Secure');

                buffer.push( pairs.join('; ') );
            }

            response.setHeader("Set-Cookie", buffer);
        }
    }
}
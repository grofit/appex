/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="../../util/TypeCheck.ts" />
/// <reference path="../../modules/IModule.ts" />
/// <reference path="../IContext.ts" />
/// <reference path="IModuleRoute.ts" />

module appex.web.routing {

    /** appex wildcard route. handles wildcard routing and url parameters */
    export class WildcardRoute implements appex.web.routing.IModuleRoute {
        
        /** regular expressions used in matching routes */
        public regexps : RegExp [];
        
        /** the type of route this is */
        public type     : string;

        /** arguments:
        *       moduleExport : the module export for this route. (must be a function).
        */
        constructor(public moduleExport:appex.modules.IModuleExport) {
            
            this.type = 'wildcard';

            this.regexps = [];

            this.initialize();
        }


        /** matches a route from the given request 
        *
        *   arguments:
        *       request : the nodejs http request to match.
        */        
        public match ( context : appex.web.IContext ) : boolean {

            var url       = node.url.parse(context.request.url);
            
            var cascade = this.moduleExport.cascade();

            if(cascade.verbs) {
                
                if(appex.util.TypeCheck.isArray(cascade.verbs)) {
                            
                    for(var n in cascade.verbs ) {
                            
                        if(appex.util.TypeCheck.isString(cascade.verbs[n])) {
                            
                            if(cascade.verbs[n].toLowerCase() == context.request.method.toLowerCase()) {
                                    
                                for(var n in this.regexps) {
                                    
                                    if(this.regexps[n].test(url.pathname)) {
                                    
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    return false;
                }
            }
            else
            {
                for(var n in this.regexps) {
                                    
                    if(this.regexps[n].test(url.pathname)) {
                                    
                        return true;
                    }
                }
            }
        }


        /** invokes the target.
        *
        *   arguments:
        *       method  : the method to invoke.
        *       context : the context.
        */
        private invoke(method, parameters, context:appex.web.IContext): void {
            
            var stack = [];

            var index = 0;

            var next  = function() {
                
                if(stack.length > 0) {
                
                    var middleware = stack.pop();
                    
                    context.next = next;

                    middleware(context);
                } 
                else {

                    method.apply(this, parameters);
                }
            }

            // if use.. invoke the middleware stack.
            if(context.cascade.use) {

                if(appex.util.TypeCheck.isArray(context.cascade.use)) {

                    for(var i = (context.cascade.use.length - 1); i >= 0; i--) {

                        if(appex.util.TypeCheck.isFunction(context.cascade.use[i])) {

                            stack.push( context.cascade.use[i] )
                        }
                    }

                    next();

                    return;
                }
            }

            method.apply(this, parameters);
        }


        /** handles route invocation.
        *
        *   arguments:
        *       context  - the context.
        *       request  - the nodejs http request.
        *       response - the nodejs http response.
        *       returns  - success if the route was handled.
        */
        public handler( context : appex.web.IContext ) : boolean {

            var method = this.moduleExport.accessor();

            if(method) {

                var url = node.url.parse( context.request.url );

                var parameters = this.arguments(url.pathname);

                parameters.unshift( context );

                context.cascade = this.moduleExport.cascade();

                this.invoke(method, parameters, context);
                
                return true;
            }

            throw new Error("appex.web.routing.ModuleWildcardRoute : unable to load accessor from moduleExport.");

            return false;
        }


        /** returns matchable patterns for this route.
        *
        *   arguments:
        *       returns  - an array of urls which match to this route.
        */
        public patterns () : string[] {
            
            var result = [];

            for(var n in this.regexps) {
            
                result.push(this.regexps[n].toString())
            }

            return result;
        }


        /** initializes this route */
        private initialize() : void {

            var method = <typescript.api.Method>this.moduleExport.type;
            
            var scope  = method.scope;

            if(scope.length > 0) {

                if(scope[0].indexOf('"') !== -1) {
                    
                    scope = scope.slice(1);
                }
            }
            
            // single argument
            if(method.parameters.length == 2) {
                
                var parameter = <typescript.api.Parameter>method.parameters[1];

                var buffer = [];

                buffer.push("^");

                if(scope.length > 0) 
                {
                    buffer.push('/', scope.join('/'));
                } 
                if(parameter.type.name == 'number') 
                { 
                    buffer.push('/([0-9]*)');
                }
                else if(parameter.type.name == 'boolean')
                {
                    buffer.push('/(true|false)');
                }
                else 
                {   
                    buffer.push('/(.*)');
                }
                buffer.push("$");          

                this.regexps.push( new RegExp(buffer.join('')) );
            }
            // multiple augments.
            else 
            {
                var last = method.parameters.length - 1;
            
                while(last != 0)    
                {
                    var buffer = [];

                    buffer.push("^");

                    if(scope.length > 0) {

                        buffer.push('/', scope.join('/'));
                    }

                    for(var i = 1; i < (last + 1); i++) {
                
                        var parameter = <typescript.api.Parameter>method.parameters[i];

                        if(parameter.type.name == 'number') 
                        { 
                            buffer.push('/([0-9]*)');
                        }
                        else if(parameter.type.name == 'boolean')
                        {
                            buffer.push('/(true|false)');
                        }
                        else 
                        {
                            buffer.push('/([^/]+)');
                        }
                    }

                    buffer.push('$');

                    this.regexps.push( new RegExp(buffer.join('')) );

                    if(!method.parameters[last].isOptional) {

                        break;
                    }

                    last = last - 1;
                }
            }
        }
        

        /** loads arguments from the url.
        *
        *   arguments:
        *       url : the url pathname
        *       returns: an array of arguments to applied to the invocation target.
        */
        private arguments (url : string) : any [] {

            var arguments = [];

            for(var n in this.regexps) {
                                    
                var match = this.regexps[n].exec(url);

                if(match) {
                    
                    var method = <typescript.api.Method>this.moduleExport.type;

                    var index  = 0;

                    for(var n in match) {

                        if(n != '0' && n != 'index' && n != 'input') {

                            var arg:any = match[n];

                            if(method.parameters[index + 1].type.name == 'number') {
                                
                                arg = parseFloat(arg);
                            }

                            if(method.parameters[index + 1].type.name == 'boolean') {

                                arg = (arg == 'true');
                                
                            }
                            arguments.push(arg);

                            index += 1;
                        }
                    }

                    return arguments;
                }
            }  

            return arguments;
        }
    }
}
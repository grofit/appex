/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="../../util/TypeCheck.ts" />
/// <reference path="../../modules/IModule.ts" />
/// <reference path="../IContext.ts" />
/// <reference path="IModuleRoute.ts" />

module appex.web.routing {

    /** appex named route. handles named routes / function */
    export class NamedRoute implements appex.web.routing.IModuleRoute {
        
        /** the pathname used to match this route. */
        public pathname  : string;

        /** the type of route this is */
        public type      : string;

        /** the function to invoke */
        public accessor  : any;

        /** the function attribute */
        public attribute : any;

        /** arguments:
        *       moduleExport : the module export for this route. (must be a function).
        */
        constructor(public moduleExport: appex.modules.IModuleExport) {

            this.type      = 'named';

            this.accessor  = this.moduleExport.accessor();

            this.attribute = this.moduleExport.attribute();

            this.initialize();
        }

        /** matches the verbs on the attribute (if exists) 
        *  arguments:
        *       context   : the request context
        *       attribute : the attribute for this route.
        */
        private match_verbs (context: appex.web.IContext): boolean {

            // if we do not have any verbs, just return.
            if(!this.attribute.verbs) {
                
                return true;
            }

             // if we do have any verbs, compare.
            if(this.attribute.verbs) {

                if(appex.util.TypeCheck.isArray(this.attribute.verbs)) {

                    for(var i = 0; i < this.attribute.verbs.length; i++) {

                        if(appex.util.TypeCheck.isString(this.attribute.verbs[i])) {

                            if(this.attribute.verbs[i].toLowerCase() == context.request.method.toLowerCase()) {

                                return true;
                            }
                        }
                    }
                }
            }

            return false;
        }

        /** matches the urls applied to the attribute (if any)
        *  arguments:
        *       context   : the request context
        *       pathname  : the url pathname to match.
        *       attribute : the attribute for this route.
        */
        private match_urls(context: appex.web.IContext): boolean {

            var url = node.url.parse(context.request.url);

            // if no attributes.urls, return default.
            if(!this.attribute.urls) {
            
                return this.pathname == url.pathname;
            }

            // if we have attributes. compare.
            if(this.attribute.urls) {

                if(appex.util.TypeCheck.isArray(this.attribute.urls)) {

                    for(var i = 0; i < this.attribute.urls.length; i++) {

                        if(appex.util.TypeCheck.isString(this.attribute.urls[i])) {

                            if(this.attribute.urls[i] == url.pathname) {

                                return true;
                            }
                        }
                    }
                }
            }
            
            return false; 
        }

        /** invokes the target.
        *
        *   arguments:
        *       method  : the method to invoke.
        *       context : the context.
        */
        private invoke(context: appex.web.IContext): void {

            var func_stack = [];

            var next = () => {

                if(func_stack.length > 0) {

                    var func = func_stack.pop();

                    context.next = next;

                    func(context);
                }
                else {

                    this.accessor(context);
                }
            }

            // if use.. invoke the middleware stack.
            if(this.attribute.use) {

                if(appex.util.TypeCheck.isArray(this.attribute.use)) {

                    for(var i = (this.attribute.use.length - 1); i >= 0; i--) {

                        if(appex.util.TypeCheck.isFunction(context.attribute.use[i])) {

                            func_stack.push(this.attribute.use[i])
                        }
                    }

                    next();

                    return;
                }
            }

            this.accessor(context);
        }

        /** matches a route from the given context 
        *
        *   arguments:
        *       context : the appex context.
        */
        public match(context: appex.web.IContext) : boolean {

            if(this.match_verbs(context)) {

                return this.match_urls(context);
            }

            return false;
        }

        /** handles route invocation.
        *
        *   arguments:
        *       app      - the application context.
        *       request  - the nodejs http request.
        *       response - the nodejs http response.
        *       returns  - success if the route was handled.
        */
        public handler(context: appex.web.IContext): boolean {

            context.attribute = this.attribute;

            this.invoke(context);

            return true;
        }

        /** returns matchable patterns for this route.
        *
        *   arguments:
        *       returns  - an array of urls which match to this route.
        */
        public urls(): string[] {

            return [this.pathname];
        }

        /** initializes this route */
        private initialize() : void {
            
            var method = <typescript.api.Method>this.moduleExport.type;

            var scope  = method.scope;

            if(scope.length > 0) {

                if(scope[0].indexOf('"') !== -1) {
                    
                    scope = scope.slice(1);
                }
            }

            if(scope.length == 0) 
            {        
                this.pathname = '/' + method.name;
            } 
            else  
            {
                this.pathname = '/' + scope.join('/') + '/' + method.name;
            }        
        }
    }
}
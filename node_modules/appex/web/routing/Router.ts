/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="../../modules/IModule.ts" />
/// <reference path="IRouter.ts" />
/// <reference path="IndexRoute.ts" />
/// <reference path="NamedRoute.ts" />
/// <reference path="WildcardRoute.ts" />

module appex.web.routing {

    /** the appex router */
    export class ModuleRouter implements appex.web.routing.IRouter {
        
        /** the routes */
        public routes : appex.web.routing.IRoute[];


        /** the appex module in which to apply routes 
        * 
        *   arguments:
        *       module - the appex module.
        */
        constructor(public module:appex.modules.IModule) {
            
            this.routes = [];

            this.initialize();
        }
        
        /** router http handler 
        *
        *   arguments:
        *       app      - the app context
        *       request  - the nodejs http request.
        *       response - the nodejs http response.
        */
        public handler ( context: appex.web.IContext ) : boolean {
            
            for(var n in this.routes) {
            
                var route = <appex.web.routing.IRoute>this.routes[n];

                if(route.match( context )) {

                    return route.handler( context );
                }
            }

            return false;
        }


        /** initializes the router */
        private initialize(): void {
            
            this.routes = [];

            var that = this;

            for(var n in this.module.exports) {

                var moduleExport = this.module.exports[n];

                if(moduleExport.type.identifier == 'method') {
                    
                    var route = that.resolve_route_from_export(moduleExport);

                    if(route) {
                    
                        that.routes.push(route);
                    }
                }
            }     
        }


        /** resolves a route from a appex modules export 
        *
        *   arguments:
        *       moduleExport - the module export to resolve.
        *       returns      - a route (or null if not applicable)
        */
        private resolve_route_from_export (moduleExport : appex.modules.IModuleExport) : appex.web.routing.IRoute {
            
            var method = <typescript.api.Method>moduleExport.type;
            
            if(this.validate_index_signature(method)) {
                
                return new appex.web.routing.IndexRoute( moduleExport );
            }

            if(this.validate_wildcard_signature(method)) {

                return new appex.web.routing.WildcardRoute( moduleExport );
            }
            
            if(this.validate_named_signature(method)) {
            
                return new appex.web.routing.NamedRoute( moduleExport );
            }

            return null;
        }


        /** validates a wildcard signature */
        private validate_wildcard_signature(method:typescript.api.Method) : boolean {
            
            if(method.name == 'wildcard') {
                
                if(method.parameters.length > 1) {
                    
                    return true;
                }
            }

            return false;
        }


        /** validates a index signature */
        private validate_index_signature(method:typescript.api.Method) : boolean {
        
            if(method.name == 'index') {
            
                if(method.parameters.length == 1) {
                
                    return true;
                }
            }

            return false;
        }


        /** validates a named signature */
        private validate_named_signature(method:typescript.api.Method) : boolean {
            
            if(method.parameters.length == 1) {
            
                return true;
            }
            
            return false;
        }
    }

}
/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="../references.ts" />

module appex.web {

    /** http cookie option */
    export interface ICookieOptions {

        maxage?: string;

        domain?: string;

        path    ?: string;

        expires ?: Date;

        httpOnly?: boolean;

        secure  ?: boolean;
    }

    /** http cookie */
    export class Cookie {

        /** indicates if this cookie has been modified. */
        public modified : boolean;

        constructor(public name: string, public value: string, public options?: ICookieOptions) {

            this.options = this.options || {};

            this.modified = false;
        }

        /** serializes this cookie a valid http Set-Cookie value.
        *
        *   returns:
        *       a valid Set-Cookie http header value.
        */
        public serialize(): string {

            this.options = this.options || {};

            var result=[this.name + '=' + encodeURIComponent(this.value)];

            if(this.options.maxage)   result.push('Max-Age=' + this.options.maxage);

            if(this.options.domain)   result.push('Domain=' + this.options.domain);

            if(this.options.expires)  result.push('Expires=' + this.options.expires.toUTCString());

            if(this.options.path)     result.push('Path=' + this.options.path);

            if(this.options.httpOnly) result.push('HttpOnly');

            if(this.options.secure)   result.push('Secure');

            return result.join('; ');
        }
    }

    /** cookie collection. A class
    *   to manage collections of http 
    *   cookies, as well as cookie state 
    *   changes.
    */
    export class CookieCollection {
        
        private cookies : Cookie[]

        constructor(request:http.ServerRequest) {

            this.setup(request);
        }

        /** iterates through each cookie in this collection 
        *   
        *   arguments: 
        *       callback: a callback to pass each cookie.
        */
        public each(callback: (cookie: appex.web.Cookie) => void): void {

            for(var i = 0; i < this.cookies.length; i++) {

                callback(this.cookies[i]);
            }
        }


        /** sets this cookie value.
        *
        *   arguments: 
        *       name: the name value of this cookie.
        *       value: the value of this cookie.
        *       options: (optional) cookie options.
        */
        public set(name: string, value: string, options?: ICookieOptions) {

            var cookie = this.get(name);

            if(!cookie) {

                cookie = new appex.web.Cookie(name, value, options);

                this.cookies.push(cookie)
            }

            cookie.value    = value;

            cookie.options  = options;

            cookie.modified = true;
        }


        /** returns a cookie by name. returns null if not found.
        * 
        *   arguments:
        *       name: the name of the cookie.
        */
        public get(name: string): Cookie {

            for(var i = 0; i < this.cookies.length; i++) {

                if(this.cookies[i].name == name) {

                    return this.cookies[i];
                }
            }

            return null;
        }


        /** initializes the cookie collection by 
        *   reading the the cookie header from the 
        *   http request.
        *
        *   arguments:
        *       request: the underlying http request.
        */
        private setup(request:http.ServerRequest) : void {

            this.cookies = [];

            if(request.headers.cookie) {

                if(typeof (request.headers.cookie) === 'string') {

                    var split = <string[]>request.headers.cookie.split(/[;,] */);

                    for(var i = 0; i < split.length; i++) {

                        var idx = split[i].indexOf('=');

                        if(idx < 0) continue;

                        var name = split[i].substr(0,idx).trim();

                        var value = split[i].substr(++idx,split[i].length).trim();

                        if(value[0] == '"') {

                            value = value.slice(1, -1);
                        }

                        try {

                            var temp = decodeURIComponent(value)

                            value = temp;

                        } catch(e) { }

                        var cookie = new appex.web.Cookie(name, value, {})

                        cookie.modified = false;

                        this.cookies.push(cookie);
                    }
                }
            }      
        }
    }
}
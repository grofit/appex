/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="../../references.ts" />
/// <reference path="../../modules/IModule.ts" />
/// <reference path="../routing/IRouter.ts" />
/// <reference path="../routing/IRoute.ts" />
/// <reference path="../routing/IModuleRoute.ts" />
/// <reference path="SitemapNode.ts" />

module appex.web.sitemap {

    /** appex sitemap. derives a hierarchy of sitemap nodes from the router */
    export class Sitemap extends SitemapNode {

        constructor(router:appex.web.routing.IRouter) {

            super();

            this.initialize(router);
        }

        public initialize(router:appex.web.routing.IRouter) : void {

            //--------------------------------------------
            // tokenizes the scope of this reflected type.
            //--------------------------------------------        
            var tokenize = (method:typescript.api.ReflectedType) : string[] => {
        
                var result =  []

                for(var n in method.scope) {
                
                    if(method.scope[n].indexOf('\"') == -1) {
                    
                        result.push(method.scope[n]);
                    }  
                }

                result.push(method.name);

                return result;
            }            

            //--------------------------------------------
            // trims tokens up to the specified index
            //--------------------------------------------
            var trim_tokens = (index : number, scope:string[]) : string => {
            
                var result = []

                for(var i = 0; i < (index + 1); i++) {
                    
                    result.push(scope[i]);
                }

                return result.join('.')
            }             

            //--------------------------------------------
            // for each route in the router.
            //--------------------------------------------
            for(var n in router.routes) {

                var route = <appex.web.routing.IModuleRoute> router.routes[n];
                
                switch(route.type) {
                
                    case 'index':
                    
                    case 'named':
                       
                    case 'wildcard':

                        var tokens = tokenize( route.moduleExport.type );

                        var index = 0;

                        var current = <appex.web.sitemap.SitemapNode>this;

                        do
                        { 
                            var found = false;

                            var name  = trim_tokens(index, tokens);

                            if(current.nodes) {

                                for(var n in current.nodes) {
                
                                    if(current.nodes[n].name == tokens[index]) {
                         
                                        current = current.nodes[n];

                                        found   = true;

                                        break;
                                    }
                                }
                            }

                            if(!found) {
                
                                var node  = new appex.web.sitemap.SitemapNode()

                                node.name = name;

                                var type  = route.moduleExport.module.reflection.get(node.name);

                                if(type.identifier == 'method') {
                    
                                    if(type) {

                                        node.urls     = route.patterns()

                                        node.cascade  = route.moduleExport.cascade();
                                    }
                                }

                                
                                if(!current.nodes) {

                                    current.nodes =  [];
                                }

                                current.nodes.push(node)

                                current = node
                            }

                            index = index + 1;
                
                        } while (index < tokens.length);

                        break;

                    default:

                        break;
                }
            }
        }

        public get(qualifier:string) : SitemapNode {
        
            return null;
        }  
    }
}
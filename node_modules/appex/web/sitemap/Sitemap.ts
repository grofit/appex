/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="../../references.ts" />
/// <reference path="../routing/IRouter.ts" />
/// <reference path="../routing/IRoute.ts" />
/// <reference path="../routing/IModuleRoute.ts" />
/// <reference path="SitemapNode.ts" />

module appex.web.sitemap {

    /** appex sitemap. derives a hierarchy of sitemap nodes from the router */
    export class Sitemap extends SitemapNode {

        constructor(router:appex.web.routing.IRouter) {

            super();

            this.initialize(router);
        }

        /** return a node based on the qualified function name. 
        *   arguments:
        *       qualifier - the fully qualified name of the function.
        */
        public get(qualifier : string) : SitemapNode {
            
            //--------------------------------------------
            // look for this qualifier...
            //--------------------------------------------
            var lookup = (qualifier:string, node:appex.web.sitemap.SitemapNode) : appex.web.sitemap.SitemapNode => {
            
                if(node.name == qualifier) {
                    
                    return node;
                }
                
                for(var n in node.nodes) {
                
                    var _node = lookup(qualifier, node.nodes[n]);

                    if(_node) {
                    
                        return _node;
                    }
                }

                return null;
            }

            if(qualifier == '') {
            
                return this;
            }

            return lookup(qualifier, this);
        }  

        /** initializes the Sitemap 
        *   note: clean this method up!
        */
        private initialize(router:appex.web.routing.IRouter) : void {

            //--------------------------------------------
            // tokenizes the scope of this reflected type.
            //--------------------------------------------        
            var get_name_stack = (method:typescript.api.ReflectedType) : string[] => {
        
                var result =  []

                for(var n in method.scope) {
                
                    if(method.scope[n].indexOf('\"') == -1) {
                    
                        result.push(method.scope[n]);
                    }  
                }

                result.push(method.name);

                return result;
            }            

            //--------------------------------------------
            // trims tokens up to the specified index
            //--------------------------------------------
            var trim_name_stack = (index : number, scope:string[]) : string => {
            
                var result = []

                for(var i = 0; i < (index + 1); i++) {
                    
                    result.push(scope[i]);
                }

                return result.join('.')
            } 

            //--------------------------------------------
            // removes the 'use' property from the cascade.
            //--------------------------------------------            
            var clean_cascade = (cascade:any) : any => {
                
                var result = {}

                for(var n in cascade) {
                    
                    if(n != 'use') {
                    
                        result[n] = cascade[n]
                    }
                }

                return result;                    
            }          

            //--------------------------------------------
            // for each route in the router.
            //--------------------------------------------
            for(var n in router.routes) {

                var route = <appex.web.routing.IModuleRoute> router.routes[n];
                
                switch(route.type) {
                
                    case 'index':
                    
                    case 'named':
                       
                    case 'wildcard':

                        var name_stack = get_name_stack( route.moduleExport.type );

                        var index = 0;

                        //--------------------------------------------
                        // scan the current sitemap node 
                        //--------------------------------------------
                        var current = <appex.web.sitemap.SitemapNode>this;

                        do
                        {   
                            var _name_stack  = trim_name_stack(index, name_stack);

                            var found = false;

                            if(current.nodes) {

                                for(var n in current.nodes) {
                
                                    if(current.nodes[n].name == name_stack[index]) {
                         
                                        current = current.nodes[n];

                                        found   = true;

                                        break;
                                    }
                                }
                            }

                            //--------------------------------------------
                            // if not found, we need to create a new node.
                            //--------------------------------------------
                            if(!found) {
                
                                var node = new appex.web.sitemap.SitemapNode()

                                node.name = _name_stack;

                                var type  = route.moduleExport.module.reflection.get(node.name);

                                //--------------------------------------------
                                // only add urls if this type is a method.
                                //--------------------------------------------
                                if(type.identifier == 'method') {
                    
                                    if(type) {

                                        node.cascade  = clean_cascade( route.moduleExport.cascade() );

                                        node.urls     = route.patterns();
                                    }
                                }

                                //--------------------------------------------
                                // if parent has no nodes, initialize
                                //--------------------------------------------                                
                                if(!current.nodes) {

                                    current.nodes =  [];
                                }

                                current.nodes.push(node)

                                current = node
                            }

                            index = index + 1;
                
                        } while (index < name_stack.length);

                        break;

                    default:

                        // todo: handle additional route types

                        break;
                }
            }
        }
    }
}
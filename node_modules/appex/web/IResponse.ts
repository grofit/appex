/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="../references.ts" />
/// <reference path="../interfaces.ts" />
/// <reference path="media/Mime.ts" />

module appex.web {

    /** A appex http response */
    export interface IResponse extends http.ServerResponse {

        /** appex response headers */
        headers : any;

        /** sends a response to the http output stream with http status code 200. will set
        *   the 'Content-Type' http header to 'text/plain' if value has not been set.
        *   arguments:
        *       data - a string value to send.
        */
        send (data     : string): void;
        
        
        /** sends a response to the http output stream with http status code 200.will set
        *   the 'Content-Type' http header to 'text/plain' if value has not been set.
        *   
        *   arguments:
        *       data - nodejs buffer to send.
        */
        send (data     : NodeBuffer): void;
        

        /** sends a response to the http output stream. will set the 'Content-Type' http header 
        * to 'text/plain' if value has not been set.
        *   
        *   arguments:
        *       status - the http status code.
        *       data - nodejs buffer to send.
        */
        send (status   : number, data : string): void;


        /** serves a local file. if not found, will send status code 404 with a 'not found' message.
        *   will resolve files mime type if the 'Content-Type' header has already been set. 
        *   
        *   arguments:
        *       filepath - the filepath from the root directory to serve.
        */
        serve (filepath: string): void;


        /** serves a local file from this root path. if not found, will send status code 404 with 
        *   a 'not found' message. will resolve files mime type if the 'Content-Type' header has 
        *   already been set.
        *   
        *   arguments:
        *       root - the root directory in which to serve.
        *       filepath - the filepath from the root directory to serve.
        */
        serve (root : string, filepath: string): void;


        /** serves a local file. if not found, will send status code 404 with a 'not found' message.
        *   
        *   arguments:
        *       root     - the root directory in which to serve.
        *       filepath - the filepath from the root directory to serve.
        *       mime     - the mime type of the content being served.
        */
        serve (root : string, filepath: string, mime:string): void;


        /** sends a json string to the http output stream with http status code 200. will set
        *   the http header 'Content-Type' to 'application/json' if this value has not been by the
        *   caller.
        *   arguments:
        *       obj - a javascript object.
        */
        json (obj      : any): void;


        /** sends a json string to the http output stream with the supplied status code. will set
        *   the http header 'Content-Type' to 'application/json' if this value has not been by the
        *   caller.
        *   
        *   arguments:
        *       status - the http status code.
        *       obj - a javascript object.
        */
        json (status   : number, obj : any): void;


        /** sends a jsonp string to the http output stream with http status code 200. will set
        *   the http header 'Content-Type' to 'text/javascript' if this value has not been by the
        *   caller. the jsonp callback variable name will be set to 'callback'.
        *
        *   arguments:
        *       obj - a javascript object.
        */
        jsonp (obj     : any): void;


        /** sends a jsonp string to the http output stream with the supplied status code. will set
        *   the http header 'Content-Type' to 'text/javascript' if this value has not been by the
        *   caller. the jsonp callback variable name will be set to 'callback'.
        *   
        *   arguments:
        *       status - the http status code.
        *       obj - a javascript object.
        */
        jsonp (status  : number, obj : any): void;


        /** sends a jsonp string to the http output stream with the supplied status code. will set
        *   the http header 'Content-Type' to 'text/javascript' if this value has not been by the
        *   caller.
        *   
        *   arguments:
        *       status - the http status code.
        *       obj - a javascript object.
        *       callback - a string value to set the jsonp callback variable.
        */
        jsonp (status  : number, obj : any, callback: string): void;
    }

    /** patches the nodejs http response with appex response api.
    *   
    *   arguments:
    *       response - the nodejs http response
    *       returns  - nodejs http + appex response api.
    */
    export function BindResponse  (response: http.ServerResponse) : appex.web.IResponse {
        
        var _response:any = <appex.web.IResponse>response;

        if(!_response.headers) _response.headers = {};
        
        if(!_response.send)    _response.send    = send;

        if(!_response.serve)   _response.serve   = serve;

        if(!_response.json)    _response.json    = json;

        if(!_response.jsonp)   _response.jsonp   = jsonp;

        return _response;
    }


    /** sends a response to the http output stream. will set the 'Content-Type' http header 
    * to 'text/plain' if value has not been set.
    *   
    *   arguments:
    *       status - the http status code.
    *       data - nodejs buffer to send.
    */    
    function send  (...params: any[]): void {

        var response = <appex.web.IResponse>this;

        var _send = function(status, data) {

            if(!response.headers['Content-Type']) {
                
                response.headers['Content-Type'] = 'text/plain';
            }

            response.headers['Content-Length'] = data.length;

            response.writeHead(status, response.headers);

            response.write(data);

            response.end();                
        };

        if(typeof params[0] == "number") {

            _send(params[0], params[1]);
        }
        else
        {
            _send(200, params[0]);           
        }
    }


    /** serves a local file. if not found, will send status code 404 with a 'not found' message.
    *   
    *   arguments:
    *       path     - the root directory in which to serve.
    *       filepath - the filepath from the root directory to serve.
    *       mime     - the mime type of the content being served.
    */
    function serve (...params: any[]) : void {
            
        var response = <appex.web.IResponse>this;

        var not_found = function(filepath) {

            var message = filepath + ' not found.';

            response.headers['Content-Type']   = mime;

            response.headers['Content-Length'] = message.length;

            response.writeHead(404, response.headers);

            response.write(message);

            response.end();         
        };

        var _serve = function(root, filepath, mime) {

            if(filepath.indexOf('..') !== -1) {
        
                not_found(filepath);

                return;
            }

            root = node.path.join(root, filepath);

            node.fs.stat(root, function(error:Error, stats:fs.Stats) {
                    
                if(error) {

                    not_found(filepath);

                    return;
                }

                node.fs.readFile(root, (error:Error, data:NodeBuffer)=> {
                        
                    if(error) {
                        
                        not_found(filepath);

                        return;
                    }

                    response.headers['Content-Type']   = mime;

                    response.headers['Content-Length'] = data.length;

                    response.writeHead(200, response.headers);

                    response.write(data);

                    response.end();  
                });
            });        
        };

        if(params.length == 1) {

            var mimetype = response.headers['Content-Type'];

            if(!mimetype) {

                var mime = new appex.web.media.Mime();

                mimetype = mime.lookup(params[0]);
            }

            _serve('', params[0], mimetype);
        }

        if(params.length == 2) {

            var mimetype = response.headers['Content-Type'];

            if(!mimetype) {

                var mime = new appex.web.media.Mime();

                mimetype = mime.lookup(params[1]);
            }

            _serve(params[0], params[1], mimetype);
        }

        if(params.length == 3) {
        
            _serve(params[0], params[1], params[2]);
        }
    }


    /** sends a json string to the http output stream with the supplied status code. will set
    *   the http header 'Content-Type' to 'application/json' if this value has not been by the
    *   caller.
    *   
    *   arguments:
    *       status - the http status code.
    *       obj - a javascript object.
    */      
    function json  (...params:any[]): void {
            
        var response = <appex.web.IResponse>this;

        var _json = function(status, obj) {

            var data = JSON.stringify(obj, null, 4);

            response.headers['Content-Type']   = 'application/json';

            response.headers['Content-Length'] = data.length;

            response.writeHead(status, response.headers);

            response.write(data);

            response.end();                 
        };

        if(typeof params[0] == "number") {

            if(params.length == 1)
            {
                _json(200, params[0]);
            }
            else
            {
                _json(params[0], params[1]);
            }
        }
        else
        {
            _json(200, params[0]);             
        }
    }


    /** sends a jsonp string to the http output stream with http status code 200. will set
    *   the http header 'Content-Type' to 'text/javascript' if this value has not been by the
    *   caller. the jsonp callback variable name will be set to 'callback'.
    *
    *   arguments:
    *       obj - a javascript object.
    */  
    function jsonp  (...params:any[]): void {
            
        var response = <appex.web.IResponse>this;

        var _jsonp = function(status, obj, callback) {

            var data = JSON.stringify(obj, null, 4);

            data = [callback, ' && ', callback, '(', data, ');'].join('');

            response.headers['Content-Type']   = 'text/javascript';

            response.headers['Content-Length'] = data.length;

            response.writeHead(status, response.headers);

            response.write(data);

            response.end();                 
        };
            
        if(params.length == 1)
        {
            _jsonp(200, params[0], 'callback');
        }

        if(params.length == 2)
        {
            _jsonp(params[0], params[1], 'callback');
        }

        if(params.length == 3)
        {
            _jsonp(params[0], params[1], params[2]);
        }
    }
}
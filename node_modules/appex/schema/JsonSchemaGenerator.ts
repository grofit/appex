/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="../references.ts" />
/// <reference path="../modules/Reflection.ts" />
/// <reference path="JsonSchemaNode.ts" />

module appex.schema {

    /** appex - json schema generator
     *  generates json schema from appex reflection meta data.
     */
    export class JsonSchemaGenerator {

        constructor(public reflection:appex.modules.Reflection) {
        
        }


        private get_schema_compatible_typename(typename:string) : string {
        
            switch(typename) {

                case 'any':

                    return 'any'; // as per draft 3.

                case 'Date':

                    return 'string';

                case 'RegExp':

                    return 'string';
                
            }

            return typename;
        }

        /** checks the qualified_typename_stack for the qualified name.
        *
        *   arguments:
        *       qualified_names - the array of names to check.
        *       returns         - true if exists, false if not.
        */
        private is_declared (qualified_typename_stack:string[], qualified_typename:string) : boolean {
        
            for(var n in qualified_typename_stack) {
            
                if(qualified_typename_stack[n] == qualified_typename) {

                    return true;
                }
            }

            return false;
        }   


        /** for a given reflected type, check if it has any comments and if
        *   so, read them, format them and return them.
        *
        *   arguments:
        *       reflected_type - the reflected_type to fetch comments from.
        *       returns        - the comment.
        */
        private get_description (reflected_type:typescript.api.ReflectedType) : string {
            
            var handle:any = reflected_type;
            
            if(handle.comments) {
                
                if( Object.prototype.toString.call( handle.comments ) === '[object Array]' ) {
                    
                    if(handle.comments.length > 0) {
                        
                        var comment = handle.comments[0];

                        comment = comment.replace(/\*/g, '').replace(/\//g, '').trim();

                        return comment;
                    }
                }
            }

            return null;         
        }


        /** loads in this interfaces variables by traversing back to get extended properties.
        *
        *   arguments:
        *       interface - the interface or class.
        *       returns - variables declarared in this interface or class.
        */
        private get_variables (qualified_names:string[], interface:typescript.api.Interface) : typescript.api.Variable [] {
        
            var variables = [];

            for(var n in interface.extends) {

                var qualified_type_name = this.reflection.typename( interface.extends[n] );

                var base_interface = <typescript.api.Interface>this.reflection.get( qualified_type_name );
                    
                if(base_interface) {

                    var base_interface_variables = this.get_variables(qualified_names,  base_interface );

                    for(var m in base_interface_variables) {
                        
                        var base_interface_variable = base_interface_variables[m];

                        variables.push( base_interface_variable );
                    }              
                }
            }

            for(var n in interface.variables) {
                           
                var variable = <typescript.api.Variable>interface.variables[n];

                variables.push(variable);
            }

            return variables;        
        }

        /** loads a schema type
        *
        *   arguments:
        *       interface - the interface to load.
        *       returns   - a schema type.
        */
        private get_schema_object (qualified_typename_stack:string[], interface:typescript.api.Interface) : appex.schema.JsonSchemaNode {

            var qualified_typename = this.reflection.typename( interface );

            if(! this.is_declared ( qualified_typename_stack, qualified_typename ) ) { 
                
                qualified_typename_stack.push (qualified_typename);

                //----------------------------------------
                // load in the type header information.
                //----------------------------------------

                var type         = new appex.schema.JsonSchemaNode();

                type.id          = qualified_typename;
                
                type.type        = 'object';

                var description = this.get_description(interface);

                if(description) {
                
                    type.description = description;
                }

                //----------------------------------------
                // load in the type properties.
                //----------------------------------------

                var variables = this.get_variables(qualified_typename_stack, interface);
                 
                type.properties = variables.length > 0 ? {} : undefined;

                for(var n in variables) {

                    var variable = <typescript.api.Variable>variables[n];

                    var property = this.get_schema_property( qualified_typename_stack, variable );

                    switch(interface.identifier) {
                        
                        case 'interface':

                            property.required = !variable.isOptional;

                            type.properties[variable.name] = property; 

                            break;

                        case 'class':

                            if(variable.isPublic) {

                                property.required = true;

                                type.properties[variable.name] = property; 
                            }

                            break;
                    }                    
                }

                return type;
            }

            // in this instance, we already have the type
            // so there is nothing to load. simple push
            // the qualified typename on $ref and return.
            else 
            {   
                var type  = new appex.schema.JsonSchemaNode();

                type.type = 'object';

                type.$ref = qualified_typename;

                return type;
            }
        }


        /** from a class or interfaces variable, this method will return
        *   the property to be assigned to the outer most type. 
        *   arguments:
        *       variable - the variable being loaded.
        *       returns  - the schema type.
        */
        private get_schema_property (qualified_typename_stack:string[], variable:typescript.api.Variable)   : appex.schema.JsonSchemaNode {

            // here we need to look at the type of the variable.
            // make a call to reflection.typename, and pass
            // the variables type as a argument.
            var qualified_typename = this.reflection.typename( variable.type );


            // using the typename returned, make another call 
            // the the reflection api to get the variables
            // type. assume it as a interface.
            var reflected_type = this.reflection.get( qualified_typename );


            //--------------------------------------------
            // object: 
            //--------------------------------------------
            if(reflected_type) {

                //----------------------------------------
                // object: is not an array.
                //----------------------------------------
                if(variable.type.arrayCount == 0) {

                    var schema = this.load_reflected_type(qualified_typename_stack, reflected_type);

                    return schema;
                }
                //----------------------------------------
                // object: is an array.
                //----------------------------------------
                else
                {
                    var array_schema   = new appex.schema.JsonSchemaNode();

                    array_schema.type  = 'array';

                    var description = this.get_description(variable);

                    if(description) {

                        array_schema.description = description;
                    }

                    var item_schema = this.load_reflected_type(qualified_typename_stack, reflected_type);

                    array_schema.items = item_schema;

                    return array_schema;
                }
            }
            //--------------------------------------------
            // primitive: (or unknown)
            //--------------------------------------------
            else {

                //----------------------------------------
                // primitive: is not an array.
                //----------------------------------------
                if(variable.type.arrayCount == 0) {

                    var schema = new appex.schema.JsonSchemaNode();

                    schema.type =  variable.type.name;

                    var description = this.get_description(variable);

                    if(description) {

                        schema.description = description;
                    }
                     
                    return schema;                        
                }
                else 
                {   

                    var array_schema   = new appex.schema.JsonSchemaNode();

                    array_schema.type  = 'array';

                    var description = this.get_description(variable);

                    if(description) {

                        array_schema.description = description;
                    }

                    var item_schema  = new appex.schema.JsonSchemaNode();
                        
                    item_schema.type =  variable.type.name;

                    array_schema.items = item_schema;

                    return array_schema;
                }
            }
        }


        /** safely loads a reflected type.
        *   
        *   arguments:
        *       qualified_typename_stack - the typename stack.
        *       reflection_type          - the reflected type to be loaded
        *       returns                  - a schema object or null.
        */
        private load_reflected_type  (qualified_typename_stack:string[], reflection_type:typescript.api.ReflectedType) : appex.schema.JsonSchemaNode {

            switch(reflection_type.identifier) {
            
                case 'class':

                    return this.get_schema_object(qualified_typename_stack, <typescript.api.Interface> reflection_type);

                    break;

                case 'interface':

                    return this.get_schema_object(qualified_typename_stack, <typescript.api.Interface> reflection_type);

                    break;

                case 'variable':

                    return this.get_schema_property(qualified_typename_stack, <typescript.api.Variable> reflection_type);

                    break;

                default:

                    return null;
            }

            return null;
        }


        /** returns a json schema by looking up a interface or class.
        *
        *   arguments:
        *       qualifier - the fully qualified name to generate a schema from.
        *       returns   - a schema object, or null if not found.
        */
        public get(qualifier:string) : appex.schema.JsonSchemaNode {

            var qualified_typename_stack:string[] = [];

            var reflected_type = this.reflection.get(qualifier);

            if(reflected_type) {
                
                return this.load_reflected_type(qualified_typename_stack, reflected_type);
                
            }

            return null;
        }
    }
}
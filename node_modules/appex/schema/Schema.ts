/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="../references.ts" />
/// <reference path="ISchema.ts" />
/// <reference path="../modules/Reflection.ts" />
/// <reference path="SchemaType.ts" />

module appex.schema {

    export class Schema implements appex.schema.ISchema {

        public reflection:appex.modules.Reflection;

        constructor(reflection:appex.modules.Reflection) {
            
            this.reflection = reflection;
        }

        /** checks this array for the qualified name.
        *
        *   arguments:
        *       qualified_names - the array of names to check.
        *       returns - true if exists, false if not.
        */
        private is_qualified(qualified_name:string, qualified_names:string[]) : boolean {
        
            for(var n in qualified_names) {
            
                if(qualified_names[n] == qualified_name) {

                    return true;
                }
            }

            return false;
        }


        /** loads the qualified type name for this reflected type.
        *
        *   arguments:
        *       reflected_type - the reflected_type to qualify.
        *       returns - the fully qualified name.
        */
        private load_qualified_typename(reflected_type:typescript.api.ReflectedType) : string {
        
            var stack = [];

            for(var n in reflected_type.scope) {
                
                if(reflected_type.scope[n].indexOf('\"') == -1) {
                        
                    stack.push(reflected_type.scope[n])
                }
            }

            stack.push(reflected_type.name);

            return stack.join('.');
        }
        

        /** loads in this interfaces variables. 
        *
        *   arguments:
        *       interface - the interface or class.
        *       returns - variables declarared in this interface or class.
        */
        private load_interface_variables(qualified_names:string[], interface:typescript.api.Interface) : typescript.api.Variable [] {
        
            var variables = [];

            for(var n in interface.extends) {

                var qualified_type_name = this.load_qualified_typename( interface.extends[n] );

                var base_interface      = <typescript.api.Interface>this.reflection.get( qualified_type_name );
                    
                if(base_interface) {
                        
                    var base_interface_variables = this.load_interface_variables(qualified_names,  base_interface );

                    for(var m in base_interface_variables) {
                        
                        var base_interface_variable = base_interface_variables[m];

                        variables.push( base_interface_variable );
                    }              
                }
            }

            for(var n in interface.variables) {
                           
                var variable = <typescript.api.Variable>interface.variables[n];

                variables.push(variable);
            }

            return variables;        
        }


        /** loads a interface variable and returns the type.
        *
        *   arguments:
        *       variable - the variable being loaded.
        *       returns  - the schema type.
        */
        private load_schema_property_type (qualified_names:string[], variable:typescript.api.Variable)   : SchemaType {

            var qualified_name  = this.load_qualified_typename( variable.type );

            var reflected_type  = this.reflection.get( qualified_name );

            if(reflected_type) 
            {
                if(variable.type.arrayCount == 0) 
                {
                    var schema = this.load_schema_type(qualified_names, <typescript.api.Interface>reflected_type);

                    return schema;
                }
                else
                {
                    var array_type   = new appex.schema.SchemaType();

                    array_type.id    = variable.name;

                    array_type.type  = 'array';

                    array_type.items = {};

                    array_type.items['type'] = this.load_schema_type(qualified_names, <typescript.api.Interface> reflected_type);

                    return array_type;
                }
            }
            else
            {
                if(variable.type.arrayCount == 0) 
                {
                    var _single_type = new appex.schema.SchemaType();

                    _single_type.id    = variable.name;

                    _single_type.type  = variable.type.name;
                        
                    return _single_type;                        
                }
                else 
                {    
                    var _array_type = new appex.schema.SchemaType();

                    _array_type.type  = 'array';

                    _array_type.items = {};

                    _array_type.items['type'] = variable.type.name;

                    return _array_type;
                }
            }
        }

        /** loads a schema type
        *
        *   arguments:
        *       interface - the interface to load.
        *       returns   - a schema type.
        */
        private load_schema_type     (qualified_names:string[], interface:typescript.api.Interface) : SchemaType {

            var type        = new appex.schema.SchemaType();

            type.id         = this.load_qualified_typename( interface );
                
            type.type       = 'object';

            if(!this.is_qualified(type.id, qualified_names)) {
                
                qualified_names.push(type.id);
            }
            else {
                
                type.id = "#" + type.id;

                return type;
            }

            // load up the variables.

            var variables = this.load_interface_variables(qualified_names, interface);

            if(variables.length > 0) {
                
                type.properties = {};
            }

            // add them to this object.

            for(var i = 0; i < variables.length; i += 1) {

                var variable = <typescript.api.Variable>variables[i];

                if(!this.is_qualified(this.load_qualified_typename(variable), qualified_names)) {

                    var property_schema_type = this.load_schema_property_type(qualified_names, variable );

                    type.properties[variable.name] = property_schema_type;

                    if(!variable.isOptional) {
                                
                        type.required = type.required || [];

                        type.required.push(variable.name);
                    }
                }
            }

            return type;
        }

        private load_reflected_type  (qualified_names:string[], reflection_type:typescript.api.ReflectedType) : SchemaType {

            switch(reflection_type.identifier) {
            
                case 'class':

                    return this.load_schema_type(qualified_names, <typescript.api.Interface> reflection_type);

                    break;

                case 'interface':

                    return this.load_schema_type(qualified_names, <typescript.api.Interface> reflection_type);

                    break;

                case 'variable':

                    return this.load_schema_property_type(qualified_names, <typescript.api.Variable> reflection_type);

                    break;

                default:

                    return null;
            }

            return null;
        }

        /**
        *
        *   arguments:
        *       qualifier - the fully qualified name to load a schema from.
        */
        public get(qualifier:string) : SchemaType {
        
            var reflected_type = this.reflection.get(qualifier);

            var qualified_names:string[] = [];

            if(reflected_type) {
                
                return this.load_reflected_type(qualified_names, reflected_type);
                
            }

            return null;
        }
    }
}
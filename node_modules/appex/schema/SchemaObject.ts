/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

module appex.schema {

    /** json schema validation error */
    export class SchemaVaidationError {
    
        constructor(public message:string) {
        
        }
    }

    /** json schema object */
    export class SchemaObject {

        public id           : string;
        
        public $ref         : string;

        public type         : any;
        
        public description  : string;

        public properties   : any;

        public items        : any;

        public required     : boolean;

        /** returns the type of the object being passed. */
        private get_type(object:any) : string {
        
            return Object.prototype.toString.call( object );
        }

        /** is this object a 'object' ? */
        private is_object(object:any) : boolean {

            return Object.prototype.toString.call( object ) === '[object Object]';
        }
        
        
        /** is this object a 'array' ? */
        private is_array(object:any) : boolean {
            
            return Object.prototype.toString.call( object ) === '[object Array]';
        }

        
        /** is this object a 'string' ? */
        private is_string(object:any) : boolean {
        
            return Object.prototype.toString.call( object ) === '[object String]';
        }


        /** is this object a 'number' ? */
        private is_number(object:any) : boolean {

            return Object.prototype.toString.call( object ) === '[object Number]';
        }


        private validate_schema_property_type (errors:appex.schema.SchemaVaidationError[], schema_object:appex.schema.SchemaObject, property_name:string, schema_property:appex.schema.SchemaObject, property:any) : void {

            switch(schema_property.type) {
                
                case 'object':

                    if(property) {
                        
                        if(!this.is_object(property)) {
                            
                            errors.push(new appex.schema.SchemaVaidationError('the property \'' + property_name + '\' on \'' + schema_object.id + '\' is not a object type.'));
                        }
                    }

                    break;
                    
                case 'string':

                    if(property) {
                        
                        if(!this.is_string(property)) {
                            
                            errors.push(new appex.schema.SchemaVaidationError('the property \'' + property_name + '\' on \'' + schema_object.id + '\' is not a string type.'));
                        }
                    }

                    break;
                    
                case 'number':

                    if(property) {
                        
                        if(!this.is_number(property)) {
                            
                            errors.push(new appex.schema.SchemaVaidationError('the property \'' + property_name + '\' on \'' + schema_object.id + '\' is not a number type.'));
                        }
                    }

                    break;
                    
                case 'array':

                    if(property) {
                        
                        if(!this.is_array(property)) {
                            
                            errors.push(new appex.schema.SchemaVaidationError('the property \'' + property_name + '\' on \'' + schema_object.id + '\' is not a array type.'));
                        }
                    }
                                    
                    break;   
            }
        }

        private validate_schema_property_required (errors:appex.schema.SchemaVaidationError[], schema_object:appex.schema.SchemaObject, property_name:string, schema_property:appex.schema.SchemaObject, property:any) : void {

            if(schema_property.required) {

                if(!property) {
                        
                    errors.push(new appex.schema.SchemaVaidationError('the property \'' + property_name + '\' is required on \'' + schema_object.id + '\''));

                }
            }
        }

        private validate_object(errors:appex.schema.SchemaVaidationError[], schema_object:appex.schema.SchemaObject, object:any) {

            for(var property_name in schema_object.properties) {

                var schema_property = <appex.schema.SchemaObject>schema_object.properties[property_name];

                var property        = object[property_name];

                this.validate_schema_property_required(errors, schema_object, property_name, schema_property, property);

                this.validate_schema_property_type(errors, schema_object, property_name, schema_property, property);

                switch(schema_property.type) {
                    
                    case 'object':

                        this.validate_object(errors, schema_property, property);

                        break;

                    case 'array':

                        var schema_array_property = schema_property.items.type;

                        if(property) {

                            if(this.is_array(property)) {

                                for(var i = 0; i < property.length; i++) {
                                        
                                    this.validate_object(errors, schema_array_property, property[i]);        
                                }
                            }
                        }

                        break;

                    default:

                        break;
                }           
            }
        }

        public validate(obj:any) : SchemaVaidationError[] {
            
            var errors = [];

            this.validate_object(errors, this, obj);

            return errors;
        }
    }
}
/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="JsonSchemaValidatorError.ts" />

module appex.schema {

    export class JsonSchemaValidator {

        /** loads a schema object based on its id */
        private get_schema_object_by_id(id:string, schema_object_stack: appex.schema.JsonSchemaNode[]) : appex.schema.JsonSchemaNode {
            
            for(var i = 0; i < schema_object_stack.length; i++) {
                
                if(schema_object_stack[i].id == id) {
                    
                    return schema_object_stack[i];
                }
            }

            return null;
        }

        /** validates a schema property type */
        private validate_schema_property_type (property        : any, 

                                               property_name   : string, 

                                               schema_object   : appex.schema.JsonSchemaNode,
                                                     
                                               schema_property : appex.schema.JsonSchemaNode, 

                                               errors          : appex.schema.JsonSchemaValidatorError[]) : void {

            var message = (property_name:string, schema_object_id:string, typename:string) :string => { return schema_object_id + '.' + property_name + ' is not of type \'' + typename + '\'.'};                                  
                                                    
            switch(schema_property.type) {
                
                case 'object':

                    if(property) {
                        
                        if(Object.prototype.toString.call( property ) !== '[object Object]') {
                           
                            errors.push(new appex.schema.JsonSchemaValidatorError('type', message(property_name, schema_object.id, 'object')));
                        }
                    }

                    break;
                    
                case 'string':

                    if(property) {
                        
                        if(Object.prototype.toString.call( property ) !== '[object String]') {
                             console.log(schema_property + " is a object??");
                            errors.push(new appex.schema.JsonSchemaValidatorError('type', message(property_name, schema_object.id, 'string')));
                        }
                    }

                    break;
                    
                case 'number':

                    if(property) {
                        
                        if(Object.prototype.toString.call( property ) !== '[object Number]') {
                            
                            errors.push(new appex.schema.JsonSchemaValidatorError('type', message(property_name, schema_object.id, 'number')));
                        }
                    }

                    break;
                    
                case 'array':

                    if(property) {
                        
                        if(Object.prototype.toString.call( property ) !== '[object Array]') {
                            
                            errors.push(new appex.schema.JsonSchemaValidatorError('type', message(property_name, schema_object.id, 'array')));
                        }
                    }
                                    
                    break;   
            }
        }

        /** validates a schema property required */
        private validate_schema_property_required ( property        : any, 

                                                    property_name   : string, 

                                                    schema_object   : appex.schema.JsonSchemaNode,  
                                                   
                                                    schema_property : appex.schema.JsonSchemaNode, 

                                                    errors          : appex.schema.JsonSchemaValidatorError[]) : void {

            if(schema_property.required) {

                if(property == null || property == undefined) {

                    errors.push(new appex.schema.JsonSchemaValidatorError('required', schema_object.id + '.' + property_name + ' is required'));

                }
            }
        }

        /** validates a schema object */
        private validate_object(object              : any,

                                schema              : appex.schema.JsonSchemaNode, 

                                schema_stack        : appex.schema.JsonSchemaNode[], 

                                errors              : appex.schema.JsonSchemaValidatorError[]) {

            schema_stack.push(schema);

            for(var property_name in schema.properties) {
            
                var property               = object[property_name];
                
                var schema_property        = <appex.schema.JsonSchemaNode>schema.properties[property_name];

                this.validate_schema_property_required(property, property_name, schema, schema_property, errors );

                if(property)
                {
                    switch(schema_property.type) {
                    
                        case 'object':

                            if(schema_property.$ref) 
                            {    
                                var schema_ref = this.get_schema_object_by_id(schema_property.$ref, schema_stack);

                                if(schema_ref)
                                {
                                    this.validate_schema_property_type(property, property_name, schema, schema_ref, errors);

                                    this.validate_object(property, schema_ref, schema_stack, errors);  
                                }
                            }
                            else {
                                
                                this.validate_schema_property_type(property, property_name, schema, schema_property, errors);

                                this.validate_object(property, schema_property, schema_stack, errors);                   
                            
                            }

                        break;
                        
                        case 'array':
                             
                            this.validate_schema_property_type(property, property_name, schema, schema_property, errors);

                            if(Object.prototype.toString.call( property ) === '[object Array]') {

                                schema_property = schema_property.items.type; // make the items.type the current property.
                               
                                for(var i = 0; i < property.length; i++) {

                                    if(schema_property.$ref) {

                                        var schema_ref = this.get_schema_object_by_id(schema_property.$ref, schema_stack);
                                                                               
                                        if(schema_ref) 
                                        {
                                            this.validate_schema_property_type(property[i], property_name, schema, schema_ref, errors);

                                            this.validate_object(property[i], schema_ref, schema_stack, errors); 
                                        }
                                    }
                                    else 
                                    {
                                        this.validate_schema_property_type(property[i], property_name, schema, schema_property, errors);

                                        this.validate_object(property[i], schema_property, schema_stack, errors);
                                    }
                                }
                            }

                            break;

                        default:
                            
                            this.validate_schema_property_type(property, property_name, schema, schema_property, errors);

                            break;
                    }
                }
            }
        }

        public validate(object:any, schema:appex.schema.JsonSchemaNode) : appex.schema.JsonSchemaValidatorError [] {
            
            var errors       = [];

            var schema_stack = [];

            this.validate_object(object, schema, schema_stack, errors);

            return errors;
        }        
    }
}
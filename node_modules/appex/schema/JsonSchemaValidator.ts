/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="../util/TypeCheck.ts" />
/// <reference path="JsonSchemaValidatorError.ts" />
/// <reference path="JsonSchemaNode.ts" />

module appex.schema {
    
    /** appex - JsonSchemaValidator
    *   validates json schema (generated from the appex json schema generator)
    *   against a object.
    */
    export class JsonSchemaValidator {

        public errors  : appex.schema.JsonSchemaValidatorError[];
        
        public schemas : appex.schema.JsonSchemaNode[];

        public get_referenced_schema (uri:string) : appex.schema.JsonSchemaNode {

            for(var i = 0; i < this.schemas.length; i++) {
                
                if(this.schemas[i].id == uri) {
                    
                    return this.schemas[i];
                }
            }

            return null;            
        }

        public validate_object(name:string, object:any, schema:appex.schema.JsonSchemaNode) : void {
            
            //-------------------------------------
            // add schema to collection
            //-------------------------------------

            this.schemas.push(schema);

            //-------------------------------------
            // de-reference schema (if required)
            //-------------------------------------

            if(schema.$ref) {
            
                var _schema = this.get_referenced_schema(schema.$ref);

                if(!_schema) {
                
                    this.errors.push(new appex.schema.JsonSchemaValidatorError('cannot de-reference type\'' + schema.$ref + '\''));

                    return;
                }

                schema = _schema;
            }

            //-------------------------------------
            // type check
            //-------------------------------------

            switch(schema.type) {

                case 'object':
                    
                    if(!appex.util.TypeCheck.isObject(object)) {

                        this.errors.push(new appex.schema.JsonSchemaValidatorError(name + ' is not a object'));
                    }

                    break;

                case 'string':

                    if(!appex.util.TypeCheck.isString(object)) {

                        this.errors.push(new appex.schema.JsonSchemaValidatorError(name + ' is not a string'));
                    }
                    break;

                case 'number':
                    
                    if(!appex.util.TypeCheck.isNumber(object)) {

                        this.errors.push(new appex.schema.JsonSchemaValidatorError(name + ' is not a number'));
                    }

                    break;

                case 'boolean':

                    if(!appex.util.TypeCheck.isBoolean(object)) {

                        this.errors.push(new appex.schema.JsonSchemaValidatorError(name + ' is not a boolean'));
                    }
                    break;

                case 'array':

                    if(!appex.util.TypeCheck.isArray(object) ) {

                        this.errors.push(new appex.schema.JsonSchemaValidatorError(name + ' is not a array'));
                    }
                    else {

                        for(var i = 0; i < object.length; i++) {

                            this.validate_object(name + '[' + i.toString() + ']', object[i], schema.items);
                        }
                    }
                  
                    break;

                default:

                    break;
            }
            
            //-------------------------------------
            // properties..
            //-------------------------------------

            for(var property_name in schema.properties) {
                
                var property        = object[property_name];

                var property_schema = <appex.schema.JsonSchemaNode>schema.properties[property_name];
                
                if(property_schema.required) {
                
                    if(!property) {
                    
                        this.errors.push(new appex.schema.JsonSchemaValidatorError(name + '.' + property_name + ' is required.'));
                    }
                }

                if(property) {

                    this.validate_object(name + '.' + property_name, property, property_schema);
                }
            }
        }


        /** validates this object against this schema
        *
        *   arguments:
        *       object: the object or instance to validate.
        *       schema: a instance of a appex.schema.JsonSchemaNode.
        *       returns: validation errors, or a empty array if none found.
        */
        public validate(object:any, schema:appex.schema.JsonSchemaNode) : appex.schema.JsonSchemaValidatorError [] {

            this.errors  = [];

            this.schemas = [];

            this.validate_object('root', object, schema);

            return this.errors;
        }
    }
}
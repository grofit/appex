/*--------------------------------------------------------------------------

ï»¿The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------*/

var appex;
(function (appex) {
    (function (web) {
        var Server = (function () {
            function Server(options) {
                this.options = options;
                this.compiler = new appex.compiler.Compiler();

                this.mime = new appex.web.media.Mime();

                this.module = null;

                this.schema = null;

                this.router = null;

                this.waiters = [];

                this.compiling = false;

                this.compiled = false;

                this.options.stdout.write('appex \033[32m- server\033[0m\n');
            }
            Server.prototype.listen = function (port) {
                var protocol = this.options.protocol == "http" ? node.http : node.https;

                var that = this;

                this.server = protocol.createServer(function (request, response, next) {
                    that.handler(request, response, null);
                });

                this.server.listen(port);
            };

            Server.prototype.handler = function (request, response, next) {
                this.waiters.push(new appex.web.Waiter(request, response, next));

                var that = this;

                this.compile(function (diagnostics) {
                    if (diagnostics) {
                        that.errors(diagnostics);

                        return;
                    }

                    while (that.waiters.length > 0) {
                        var waiter = that.waiters.pop();

                        var context = that.load_context(waiter.request, waiter.response, waiter.next);

                        var handled = that.router.handler(context);

                        if (handled) {
                            if (that.options.logging) {
                                var message = [];

                                message.push(context.request.method, ' ');

                                message.push(context.request.url, '\n');

                                that.options.stdout.write(message.join(''));
                            }
                        } else {
                            if (context.next) {
                                context.next();
                            }
                        }
                    }
                });
            };

            Server.prototype.load_context = function (request, response, next) {
                var context = new appex.web.Context();

                if (this.options.context) {
                    for (var n in this.options.context) {
                        context[n] = this.options.context[n];
                    }
                }

                context.request = appex.web.BindRequest(request);

                context.response = appex.web.BindResponse(response);

                context.next = function () {
                };

                context.module = this.module;

                context.schema = this.schema;

                context.router = this.router;

                context.mime = this.mime;

                if (next) {
                    context.next = next;
                }

                context.cascade = {};

                return context;
            };

            Server.prototype.compile = function (callback) {
                if (!this.compiled) {
                    if (!this.compiling) {
                        this.compiling = true;

                        var that = this;

                        this.compiler.compile(this.options.program, function (result) {
                            that.compiling = false;

                            if (result.diagnostics.length > 0) {
                                callback(result.diagnostics);

                                return;
                            }

                            that.module = new appex.modules.Module(result);

                            that.schema = new appex.schema.Schema(that.module.reflection);

                            that.router = new appex.web.routing.ModuleRouter(that.module);

                            that.compiled = true;

                            that.compiler.dispose();

                            callback(null);
                        });
                    }
                } else {
                    callback(null);
                }
            };

            Server.prototype.errors = function (diagnostics) {
                while (this.waiters.length > 0) {
                    var request = this.waiters.pop();

                    request.response.writeHead(500, { 'content-type': 'text/plain' });

                    request.response.write('internal server error.');

                    request.response.end();

                    for (var n in diagnostics) {
                        var diagnostic = diagnostics[n];

                        var message = [];

                        message.push(diagnostic.path);

                        message.push(" [", (diagnostic.line_index + 1).toString(), ":", (diagnostic.char_index + 1).toString(), "] ");

                        message.push(diagnostic.message, '\n');

                        if (this.options.logging) {
                            this.options.stderr.write(message.join(''));
                        }
                    }
                }
            };

            Server.prototype.dispose = function () {
                this.compiler.dispose();

                if (this.module) {
                    this.module.dispose();
                }
            };
            return Server;
        })();
        web.Server = Server;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=Server.js.map
var appex;
(function (appex) {
    (function (web) {
        var Waiter = (function () {
            function Waiter(request, response, next) {
                this.request = request;
                this.response = response;
                this.next = next;
            }
            return Waiter;
        })();
        web.Waiter = Waiter;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=Waiter.js.map
var appex;
(function (appex) {
    (function (web) {
        var Context = (function () {
            function Context() {
            }
            return Context;
        })();
        web.Context = Context;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=Context.js.map
var appex;
(function (appex) {
    (function (web) {
        (function (routing) {
            var WildcardRoute = (function () {
                function WildcardRoute(moduleExport) {
                    this.moduleExport = moduleExport;
                    this.regexps = [];

                    this.initialize();
                }
                WildcardRoute.prototype.match = function (context) {
                    var url = node.url.parse(context.request.url);

                    var cascade = this.moduleExport.cascade();

                    if (cascade.verbs) {
                        if (Object.prototype.toString.call(cascade.verbs) === '[object Array]') {
                            for (var n in cascade.verbs) {
                                if (Object.prototype.toString.call(cascade.verbs[n]) === '[object String]') {
                                    if (cascade.verbs[n].toLowerCase() == context.request.method.toLowerCase()) {
                                        for (var n in this.regexps) {
                                            if (this.regexps[n].test(url.pathname)) {
                                                return true;
                                            }
                                        }
                                    }
                                    return false;
                                }
                                return false;
                            }
                            return false;
                        }
                    } else {
                        for (var n in this.regexps) {
                            if (this.regexps[n].test(url.pathname)) {
                                return true;
                            }
                        }
                    }
                };

                WildcardRoute.prototype.invoke = function (method, parameters, context) {
                    var stack = [];

                    var index = 0;

                    var next = function () {
                        if (stack.length > 0) {
                            var middleware = stack.pop();

                            context.next = next;

                            middleware(context);
                        } else {
                            method.apply(this, parameters);
                        }
                    };

                    if (context.cascade.use) {
                        if (Object.prototype.toString.call(context.cascade.use) === '[object Array]') {
                            for (var i = (context.cascade.use.length - 1); i >= 0; i--) {
                                if (Object.prototype.toString.call(context.cascade.use[i]) === '[object Function]') {
                                    stack.push(context.cascade.use[i]);
                                }
                            }

                            next();

                            return;
                        }
                    }

                    method.apply(this, parameters);
                };

                WildcardRoute.prototype.handler = function (context) {
                    var method = this.moduleExport.accessor();

                    if (method) {
                        var url = node.url.parse(context.request.url);

                        var parameters = this.arguments(url.pathname);

                        parameters.unshift(context);

                        context.cascade = this.moduleExport.cascade();

                        this.invoke(method, parameters, context);

                        return true;
                    }

                    throw new Error("appex.web.routing.ModuleWildcardRoute : unable to load accessor from moduleExport.");

                    return false;
                };

                WildcardRoute.prototype.initialize = function () {
                    var method = this.moduleExport.type;

                    var scope = method.scope;

                    if (scope.length > 0) {
                        if (scope[0].indexOf('"') !== -1) {
                            scope = scope.slice(1);
                        }
                    }

                    if (method.parameters.length == 2) {
                        var parameter = method.parameters[1];

                        var buffer = [];

                        buffer.push("^");

                        if (scope.length > 0) {
                            buffer.push('/', scope.join('/'));
                        }
                        if (parameter.type.name == 'number') {
                            buffer.push('/([0-9]*)');
                        } else if (parameter.type.name == 'boolean') {
                            buffer.push('/(true|false)');
                        } else {
                            buffer.push('/(.*)');
                        }
                        buffer.push("$");

                        this.regexps.push(new RegExp(buffer.join('')));
                    } else {
                        var last = method.parameters.length - 1;

                        while (last != 0) {
                            var buffer = [];

                            buffer.push("^");

                            if (scope.length > 0) {
                                buffer.push('/', scope.join('/'));
                            }

                            for (var i = 1; i < (last + 1); i++) {
                                var parameter = method.parameters[i];

                                if (parameter.type.name == 'number') {
                                    buffer.push('/([0-9]*)');
                                } else if (parameter.type.name == 'boolean') {
                                    buffer.push('/(true|false)');
                                } else {
                                    buffer.push('/([^/]+)');
                                }
                            }

                            buffer.push('$');

                            this.regexps.push(new RegExp(buffer.join('')));

                            if (!method.parameters[last].isOptional) {
                                break;
                            }

                            last = last - 1;
                        }
                    }
                };

                WildcardRoute.prototype.arguments = function (url) {
                    var arguments = [];

                    for (var n in this.regexps) {
                        var match = this.regexps[n].exec(url);

                        if (match) {
                            var method = this.moduleExport.type;

                            var index = 0;

                            for (var n in match) {
                                if (n != '0' && n != 'index' && n != 'input') {
                                    var arg = match[n];

                                    if (method.parameters[index + 1].type.name == 'number') {
                                        arg = parseFloat(arg);
                                    }

                                    if (method.parameters[index + 1].type.name == 'boolean') {
                                        arg = (arg == 'true');
                                    }
                                    arguments.push(arg);

                                    index += 1;
                                }
                            }

                            return arguments;
                        }
                    }

                    return arguments;
                };
                return WildcardRoute;
            })();
            routing.WildcardRoute = WildcardRoute;
        })(web.routing || (web.routing = {}));
        var routing = web.routing;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=WildcardRoute.js.map
var appex;
(function (appex) {
    (function (web) {
        (function (routing) {
            var NamedRoute = (function () {
                function NamedRoute(moduleExport) {
                    this.moduleExport = moduleExport;
                    this.initialize();
                }
                NamedRoute.prototype.match = function (context) {
                    var url = node.url.parse(context.request.url);

                    var cascade = this.moduleExport.cascade();

                    if (cascade.verbs) {
                        if (Object.prototype.toString.call(cascade.verbs) === '[object Array]') {
                            for (var n in cascade.verbs) {
                                if (Object.prototype.toString.call(cascade.verbs[n]) === '[object String]') {
                                    if (cascade.verbs[n].toLowerCase() == context.request.method.toLowerCase()) {
                                        return this.pathname == url.pathname;
                                    }
                                    return false;
                                }
                                return false;
                            }
                            return false;
                        }
                    } else {
                        return this.pathname == url.pathname;
                    }
                };

                NamedRoute.prototype.invoke = function (method, context) {
                    var stack = [];

                    var index = 0;

                    var next = function () {
                        if (stack.length > 0) {
                            var middleware = stack.pop();

                            context.next = next;

                            middleware(context);
                        } else {
                            method(context);
                        }
                    };

                    if (context.cascade.use) {
                        if (Object.prototype.toString.call(context.cascade.use) === '[object Array]') {
                            for (var i = (context.cascade.use.length - 1); i >= 0; i--) {
                                if (Object.prototype.toString.call(context.cascade.use[i]) === '[object Function]') {
                                    stack.push(context.cascade.use[i]);
                                }
                            }

                            next();

                            return;
                        }
                    }

                    method(context);
                };

                NamedRoute.prototype.handler = function (context) {
                    var method = this.moduleExport.accessor();

                    if (method) {
                        context.cascade = this.moduleExport.cascade();

                        this.invoke(method, context);

                        return true;
                    }

                    throw new Error('appex.web.routing.ModuleNamedRoute : unable to load accessor from moduleExport.');

                    return false;
                };

                NamedRoute.prototype.initialize = function () {
                    var method = this.moduleExport.type;

                    var scope = method.scope;

                    if (scope.length > 0) {
                        if (scope[0].indexOf('"') !== -1) {
                            scope = scope.slice(1);
                        }
                    }

                    if (scope.length == 0) {
                        this.pathname = '/' + method.name;
                    } else {
                        this.pathname = '/' + scope.join('/') + '/' + method.name;
                    }
                };
                return NamedRoute;
            })();
            routing.NamedRoute = NamedRoute;
        })(web.routing || (web.routing = {}));
        var routing = web.routing;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=NamedRoute.js.map
var appex;
(function (appex) {
    (function (web) {
        (function (routing) {
            var IndexRoute = (function () {
                function IndexRoute(moduleExport) {
                    this.moduleExport = moduleExport;
                    this.initialize();
                }
                IndexRoute.prototype.match = function (context) {
                    var url = node.url.parse(context.request.url);

                    var cascade = this.moduleExport.cascade();

                    if (cascade.verbs) {
                        if (Object.prototype.toString.call(cascade.verbs) === '[object Array]') {
                            for (var n in cascade.verbs) {
                                if (Object.prototype.toString.call(cascade.verbs[n]) === '[object String]') {
                                    if (cascade.verbs[n].toLowerCase() == context.request.method.toLowerCase()) {
                                        return this.pathname == url.pathname;
                                    }
                                    return false;
                                }
                                return false;
                            }
                            return false;
                        }
                    } else {
                        return this.pathname == url.pathname;
                    }
                };

                IndexRoute.prototype.invoke = function (method, context) {
                    var stack = [];

                    var index = 0;

                    var next = function () {
                        if (stack.length > 0) {
                            var middleware = stack.pop();

                            context.next = next;

                            middleware(context);
                        } else {
                            method(context);
                        }
                    };

                    if (context.cascade.use) {
                        if (Object.prototype.toString.call(context.cascade.use) === '[object Array]') {
                            for (var i = (context.cascade.use.length - 1); i >= 0; i--) {
                                if (Object.prototype.toString.call(context.cascade.use[i]) === '[object Function]') {
                                    stack.push(context.cascade.use[i]);
                                }
                            }

                            next();

                            return;
                        }
                    }

                    method(context);
                };

                IndexRoute.prototype.handler = function (context) {
                    var method = this.moduleExport.accessor();

                    if (method) {
                        context.cascade = this.moduleExport.cascade();

                        this.invoke(method, context);

                        return true;
                    }

                    throw new Error('appex.web.routing.ModuleIndexRoute : unable to load accessor from moduleExport.');

                    return false;
                };

                IndexRoute.prototype.initialize = function () {
                    var method = this.moduleExport.type;

                    var scope = method.scope;

                    if (scope.length > 0) {
                        if (scope[0].indexOf('"') !== -1) {
                            scope = scope.slice(1);
                        }
                    }

                    if (scope.length == 0) {
                        this.pathname = '/';
                    } else {
                        this.pathname = '/' + scope.join('/');
                    }
                };
                return IndexRoute;
            })();
            routing.IndexRoute = IndexRoute;
        })(web.routing || (web.routing = {}));
        var routing = web.routing;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=IndexRoute.js.map
var appex;
(function (appex) {
    (function (web) {
        (function (routing) {
            var ModuleRouter = (function () {
                function ModuleRouter(module) {
                    this.module = module;
                    this.routes = [];

                    this.initialize();
                }
                ModuleRouter.prototype.handler = function (context) {
                    for (var n in this.routes) {
                        var route = this.routes[n];

                        if (route.match(context)) {
                            return route.handler(context);
                        }
                    }

                    return false;
                };

                ModuleRouter.prototype.initialize = function () {
                    this.routes = [];

                    var that = this;

                    for (var n in this.module.exports) {
                        var moduleExport = this.module.exports[n];

                        if (moduleExport.type.identifier == 'method') {
                            var route = that.resolve_route_from_export(moduleExport);

                            if (route) {
                                that.routes.push(route);
                            }
                        }
                    }
                };

                ModuleRouter.prototype.resolve_route_from_export = function (moduleExport) {
                    var method = moduleExport.type;

                    if (this.validate_index_signature(method)) {
                        return new appex.web.routing.IndexRoute(moduleExport);
                    }

                    if (this.validate_wildcard_signature(method)) {
                        return new appex.web.routing.WildcardRoute(moduleExport);
                    }

                    if (this.validate_named_signature(method)) {
                        return new appex.web.routing.NamedRoute(moduleExport);
                    }

                    return null;
                };

                ModuleRouter.prototype.validate_wildcard_signature = function (method) {
                    if (method.name == 'wildcard') {
                        if (method.parameters.length > 1) {
                            return true;
                        }
                    }

                    return false;
                };

                ModuleRouter.prototype.validate_index_signature = function (method) {
                    if (method.name == 'index') {
                        if (method.parameters.length == 1) {
                            return true;
                        }
                    }

                    return false;
                };

                ModuleRouter.prototype.validate_named_signature = function (method) {
                    if (method.parameters.length == 1) {
                        return true;
                    }

                    return false;
                };
                return ModuleRouter;
            })();
            routing.ModuleRouter = ModuleRouter;
        })(web.routing || (web.routing = {}));
        var routing = web.routing;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=Router.js.map
var appex;
(function (appex) {
    (function (schema) {
        var SchemaObject = (function () {
            function SchemaObject() {
            }
            return SchemaObject;
        })();
        schema.SchemaObject = SchemaObject;

        var Schema = (function () {
            function Schema(reflection) {
                this.reflection = reflection;
            }
            Schema.prototype.load_description = function (reflected_type) {
                var handle = reflected_type;

                if (handle.comments) {
                    if (Object.prototype.toString.call(handle.comments) === '[object Array]') {
                        if (handle.comments.length > 0) {
                            var comment = handle.comments[0];

                            comment = comment.replace(/\*/g, '').replace(/\//g, '').trim();

                            return comment;
                        }
                    }
                }

                return null;
            };

            Schema.prototype.is_qualified = function (qualified_name, qualified_names) {
                for (var n in qualified_names) {
                    if (qualified_names[n] == qualified_name) {
                        return true;
                    }
                }

                return false;
            };

            Schema.prototype.load_qualified_typename = function (reflected_type) {
                var stack = [];

                for (var n in reflected_type.scope) {
                    if (reflected_type.scope[n].indexOf('\"') == -1) {
                        stack.push(reflected_type.scope[n]);
                    }
                }

                stack.push(reflected_type.name);

                return stack.join('.');
            };

            Schema.prototype.load_interface_variables = function (qualified_names, interface) {
                var variables = [];

                for (var n in interface.extends) {
                    var qualified_type_name = this.load_qualified_typename(interface.extends[n]);

                    var base_interface = this.reflection.get(qualified_type_name);

                    if (base_interface) {
                        var base_interface_variables = this.load_interface_variables(qualified_names, base_interface);

                        for (var m in base_interface_variables) {
                            var base_interface_variable = base_interface_variables[m];

                            variables.push(base_interface_variable);
                        }
                    }
                }

                for (var n in interface.variables) {
                    var variable = interface.variables[n];

                    variables.push(variable);
                }

                return variables;
            };

            Schema.prototype.load_schema_property_object = function (qualified_names, variable) {
                var qualified_name = this.load_qualified_typename(variable.type);

                var reflected_type = this.reflection.get(qualified_name);

                if (reflected_type) {
                    if (variable.type.arrayCount == 0) {
                        var schema = this.load_schema_object(qualified_names, reflected_type);

                        return schema;
                    } else {
                        var array_type = new appex.schema.SchemaObject();

                        array_type.id = variable.name;

                        array_type.type = 'array';

                        array_type.items = {};

                        if (variable.comments) {
                            if (variable.comments.length > 0) {
                                array_type.description = variable.comments[0];
                            }
                        }

                        array_type.items['type'] = this.load_schema_object(qualified_names, reflected_type);

                        return array_type;
                    }
                } else {
                    if (variable.type.arrayCount == 0) {
                        var single_type = new appex.schema.SchemaObject();

                        single_type.id = variable.name;

                        single_type.type = variable.type.name;

                        var description = this.load_description(variable);

                        if (description) {
                            single_type.description = description;
                        }

                        return single_type;
                    } else {
                        var array_type = new appex.schema.SchemaObject();

                        array_type.type = 'array';

                        array_type.items = {};

                        array_type.items['type'] = variable.type.name;

                        var description = this.load_description(variable);

                        if (description) {
                            array_type.description = description;
                        }

                        return array_type;
                    }
                }
            };

            Schema.prototype.load_schema_object = function (qualified_names, interface) {
                var type = new appex.schema.SchemaObject();

                if (!this.is_qualified(type.id, qualified_names)) {
                    qualified_names.push(type.id);

                    type.id = "#" + this.load_qualified_typename(interface);

                    type.type = 'object';
                } else {
                    type.$ref = "#" + this.load_qualified_typename(interface);

                    type.type = 'object';

                    return type;
                }

                var variables = this.load_interface_variables(qualified_names, interface);

                if (variables.length > 0) {
                    type.properties = {};
                }

                for (var i = 0; i < variables.length; i += 1) {
                    var variable = variables[i];

                    if (!this.is_qualified(this.load_qualified_typename(variable), qualified_names)) {
                        var property_schema_type = this.load_schema_property_object(qualified_names, variable);

                        type.properties[variable.name] = property_schema_type;

                        if (!variable.isOptional) {
                            type.required = type.required || [];

                            type.required.push(variable.name);
                        }
                    }
                }

                return type;
            };

            Schema.prototype.load_reflected_type = function (qualified_names, reflection_type) {
                switch (reflection_type.identifier) {
                    case 'class':
                        return this.load_schema_object(qualified_names, reflection_type);

                        break;

                    case 'interface':
                        return this.load_schema_object(qualified_names, reflection_type);

                        break;

                    case 'variable':
                        return this.load_schema_property_object(qualified_names, reflection_type);

                        break;

                    default:
                        return null;
                }

                return null;
            };

            Schema.prototype.get = function (qualifier) {
                var reflected_type = this.reflection.get(qualifier);

                var qualified_names = [];

                if (reflected_type) {
                    return this.load_reflected_type(qualified_names, reflected_type);
                }

                return null;
            };
            return Schema;
        })();
        schema.Schema = Schema;
    })(appex.schema || (appex.schema = {}));
    var schema = appex.schema;
})(appex || (appex = {}));
//@ sourceMappingURL=Schema.js.map
var appex;
(function (appex) {
    (function (web) {
        var DevelopmentServer = (function () {
            function DevelopmentServer(options) {
                this.options = options;
                this.compiler = new appex.compiler.Compiler();

                this.mime = new appex.web.media.Mime();

                this.module = null;

                this.schema = null;

                this.router = null;

                this.waiters = [];

                this.compiling = false;

                this.options.stdout.write('appex \033[32m- development server\033[0m\n');
            }
            DevelopmentServer.prototype.listen = function (port) {
                var protocol = this.options.protocol == "http" ? node.http : node.https;

                var that = this;

                this.server = protocol.createServer(function (request, response, next) {
                    that.handler(request, response, null);
                });

                this.server.listen(port);
            };

            DevelopmentServer.prototype.handler = function (request, response, next) {
                this.waiters.push(new appex.web.Waiter(request, response, next));

                var that = this;

                this.compile(function (diagnostics) {
                    if (diagnostics) {
                        that.errors(diagnostics);

                        return;
                    }

                    while (that.waiters.length > 0) {
                        var waiter = that.waiters.pop();

                        var context = that.load_context(waiter.request, waiter.response, waiter.next);

                        var handled = that.router.handler(context);

                        if (handled) {
                            if (that.options.logging) {
                                var message = [];

                                message.push(context.request.method, ' ');

                                message.push(context.request.url, '\n');

                                that.options.stdout.write(message.join(''));
                            }
                        } else {
                            if (context.next) {
                                context.next();
                            }
                        }
                    }
                });
            };

            DevelopmentServer.prototype.load_context = function (request, response, next) {
                var context = new appex.web.Context();

                if (this.options.context) {
                    for (var n in this.options.context) {
                        context[n] = this.options.context[n];
                    }
                }

                context.request = appex.web.BindRequest(request);

                context.response = appex.web.BindResponse(response);

                context.next = function () {
                };

                context.module = this.module;

                context.schema = this.schema;

                context.router = this.router;

                context.mime = this.mime;

                if (next) {
                    context.next = next;
                }

                context.cascade = {};

                return context;
            };

            DevelopmentServer.prototype.compile = function (callback) {
                if (!this.compiling) {
                    this.compiling = true;

                    var that = this;

                    this.compiler.compile(this.options.program, function (result) {
                        that.compiling = false;

                        if (result.diagnostics.length > 0) {
                            callback(result.diagnostics);

                            return;
                        }

                        that.module = new appex.modules.Module(result);

                        that.schema = new appex.schema.Schema(that.module.reflection);

                        that.router = new appex.web.routing.ModuleRouter(that.module);

                        callback(null);
                    });
                }
            };

            DevelopmentServer.prototype.errors = function (diagnostics) {
                while (this.waiters.length > 0) {
                    var request = this.waiters.pop();

                    request.response.writeHead(500, { 'content-type': 'text/plain' });

                    for (var n in diagnostics) {
                        var diagnostic = diagnostics[n];

                        var message = [];

                        message.push(diagnostic.path);

                        message.push(" [", (diagnostic.line_index + 1).toString(), ":", (diagnostic.char_index + 1).toString(), "] ");

                        message.push(diagnostic.message, '\n');

                        request.response.write(message.join(''));

                        if (this.options.logging) {
                            this.options.stderr.write(message.join(''));
                        }
                    }

                    request.response.end();
                }
            };

            DevelopmentServer.prototype.dispose = function () {
                this.compiler.dispose();

                if (this.module) {
                    this.module.dispose();
                }
            };
            return DevelopmentServer;
        })();
        web.DevelopmentServer = DevelopmentServer;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=DevelopmentServer.js.map
//@ sourceMappingURL=IServer.js.map
var appex;
(function (appex) {
    (function (web) {
        function NormalizeServerOptions(options) {
            if (options.program == null) {
                throw new Error('appex.web.IServerOptions: sourcefile is required.');
            }

            if (options.devmode == null) {
                options.devmode = false;
            }

            if (options.logging == null) {
                options.logging = false;
            }

            if (options.protocol == null) {
                options.protocol = "http";
            } else {
                if (options.protocol != "http" && options.protocol != "https") {
                    throw new Error('appex.web.IServerOptions: the option \"' + options.protocol + '\" is not a valid server protocol.');
                }
            }

            if (options.context == null) {
                options.context = {};
            }

            if (options.stdout == null) {
                options.stdout = process.stdout;
            }

            if (options.stderr == null) {
                options.stderr = process.stderr;
            }

            return options;
        }
        web.NormalizeServerOptions = NormalizeServerOptions;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=ServerOptions.js.map
//@ sourceMappingURL=IRoute.js.map
var appex;
(function (appex) {
    (function (web) {
        function BindResponse(response) {
            var _response = response;

            if (!_response.headers)
                _response.headers = {};

            if (!_response.send)
                _response.send = send;

            if (!_response.serve)
                _response.serve = serve;

            if (!_response.json)
                _response.json = json;

            if (!_response.jsonp)
                _response.jsonp = jsonp;

            return _response;
        }
        web.BindResponse = BindResponse;

        function send() {
            var params = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                params[_i] = arguments[_i + 0];
            }
            var response = this;

            var _send = function (status, data) {
                if (!response.headers['Content-Type']) {
                    response.headers['Content-Type'] = 'text/plain';
                }

                response.headers['Content-Length'] = data.length;

                response.writeHead(status, response.headers);

                response.write(data);

                response.end();
            };

            if (typeof params[0] == "number") {
                _send(params[0], params[1]);
            } else {
                _send(200, params[0]);
            }
        }

        function serve() {
            var params = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                params[_i] = arguments[_i + 0];
            }
            var response = this;

            var not_found = function (filepath) {
                var message = filepath + ' not found.';

                response.headers['Content-Type'] = mime;

                response.headers['Content-Length'] = message.length;

                response.writeHead(404, response.headers);

                response.write(message);

                response.end();
            };

            var _serve = function (root, filepath, mime) {
                if (filepath.indexOf('..') !== -1) {
                    not_found(filepath);

                    return;
                }

                root = node.path.join(root, filepath);

                node.fs.stat(root, function (error, stats) {
                    if (error) {
                        not_found(filepath);

                        return;
                    }

                    node.fs.readFile(root, function (error, data) {
                        if (error) {
                            not_found(filepath);

                            return;
                        }

                        response.headers['Content-Type'] = mime;

                        response.headers['Content-Length'] = data.length;

                        response.writeHead(200, response.headers);

                        response.write(data);

                        response.end();
                    });
                });
            };

            if (params.length == 1) {
                var mimetype = response.headers['Content-Type'];

                if (!mimetype) {
                    var mime = new appex.web.media.Mime();

                    mimetype = mime.lookup(params[0]);
                }

                _serve('', params[0], mimetype);
            }

            if (params.length == 2) {
                var mimetype = response.headers['Content-Type'];

                if (!mimetype) {
                    var mime = new appex.web.media.Mime();

                    mimetype = mime.lookup(params[1]);
                }

                _serve(params[0], params[1], mimetype);
            }

            if (params.length == 3) {
                _serve(params[0], params[1], params[2]);
            }
        }

        function json() {
            var params = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                params[_i] = arguments[_i + 0];
            }
            var response = this;

            var _json = function (status, obj) {
                var data = JSON.stringify(obj, null, 4);

                response.headers['Content-Type'] = 'application/json';

                response.headers['Content-Length'] = data.length;

                response.writeHead(status, response.headers);

                response.write(data);

                response.end();
            };

            if (typeof params[0] == "number") {
                if (params.length == 1) {
                    _json(200, params[0]);
                } else {
                    _json(params[0], params[1]);
                }
            } else {
                _json(200, params[0]);
            }
        }

        function jsonp() {
            var params = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                params[_i] = arguments[_i + 0];
            }
            var response = this;

            var _jsonp = function (status, obj, callback) {
                var data = JSON.stringify(obj, null, 4);

                data = [callback, ' && ', callback, '(', data, ');'].join('');

                response.headers['Content-Type'] = 'text/javascript';

                response.headers['Content-Length'] = data.length;

                response.writeHead(status, response.headers);

                response.write(data);

                response.end();
            };

            if (params.length == 1) {
                _jsonp(200, params[0], 'callback');
            }

            if (params.length == 2) {
                _jsonp(params[0], params[1], 'callback');
            }

            if (params.length == 3) {
                _jsonp(params[0], params[1], params[2]);
            }
        }
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=IResponse.js.map
var appex;
(function (appex) {
    (function (web) {
        function BindRequest(request) {
            var _request = request;

            return _request;
        }
        web.BindRequest = BindRequest;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=IRequest.js.map
//@ sourceMappingURL=ISchema.js.map
//@ sourceMappingURL=IContext.js.map
//@ sourceMappingURL=IRouter.js.map
var appex;
(function (appex) {
    (function (web) {
        (function (media) {
            var Mime = (function () {
                function Mime() {
                }
                Mime.prototype.lookup = function (filename) {
                    var idx = filename.lastIndexOf('.');

                    if (idx != -1) {
                        var extension = filename.substring(idx);

                        extension = extension.indexOf(".") != -1 ? extension.replace(".", '') : extension;

                        switch (extension) {
                            case "123":
                                return "application/vnd.lotus-1-2-3";
                            case "3dml":
                                return "text/vnd.in3d.3dml";
                            case "3ds":
                                return "image/x-3ds";
                            case "3g2":
                                return "video/3gpp2";
                            case "3gp":
                                return "video/3gpp";
                            case "7z":
                                return "application/x-7z-compressed";
                            case "aab":
                                return "application/x-authorware-bin";
                            case "aac":
                                return "audio/x-aac";
                            case "aam":
                                return "application/x-authorware-map";
                            case "aas":
                                return "application/x-authorware-seg";
                            case "abw":
                                return "application/x-abiword";
                            case "ac":
                                return "application/pkix-attr-cert";
                            case "acc":
                                return "application/vnd.americandynamics.acc";
                            case "ace":
                                return "application/x-ace-compressed";
                            case "acu":
                                return "application/vnd.acucobol";
                            case "acutc":
                                return "application/vnd.acucorp";
                            case "adp":
                                return "audio/adpcm";
                            case "aep":
                                return "application/vnd.audiograph";
                            case "afm":
                                return "application/x-font-type1";
                            case "afp":
                                return "application/vnd.ibm.modcap";
                            case "ahead":
                                return "application/vnd.ahead.space";
                            case "ai":
                                return "application/postscript";
                            case "aif":
                                return "audio/x-aiff";
                            case "aifc":
                                return "audio/x-aiff";
                            case "aiff":
                                return "audio/x-aiff";
                            case "air":
                                return "application/vnd.adobe.air-application-installer-package+zip";
                            case "ait":
                                return "application/vnd.dvb.ait";
                            case "ami":
                                return "application/vnd.amiga.ami";
                            case "apk":
                                return "application/vnd.android.package-archive";
                            case "appcache":
                                return "text/cache-manifest";
                            case "application":
                                return "application/x-ms-application";
                            case "apr":
                                return "application/vnd.lotus-approach";
                            case "arc":
                                return "application/x-freearc";
                            case "asax":
                                return "text/csharp";
                            case "asc":
                                return "application/pgp-signature";
                            case "asf":
                                return "video/x-ms-asf";
                            case "asm":
                                return "text/x-asm";
                            case "aso":
                                return "application/vnd.accpac.simply.aso";
                            case "asx":
                                return "video/x-ms-asf";
                            case "atc":
                                return "application/vnd.acucorp";
                            case "atom":
                                return "application/atom+xml";
                            case "atomcat":
                                return "application/atomcat+xml";
                            case "atomsvc":
                                return "application/atomsvc+xml";
                            case "atx":
                                return "application/vnd.antix.game-component";
                            case "au":
                                return "audio/basic";
                            case "avi":
                                return "video/x-msvideo";
                            case "aw":
                                return "application/applixware";
                            case "azf":
                                return "application/vnd.airzip.filesecure.azf";
                            case "azs":
                                return "application/vnd.airzip.filesecure.azs";
                            case "azw":
                                return "application/vnd.amazon.ebook";
                            case "bat":
                                return "application/x-msdownload";
                            case "bcpio":
                                return "application/x-bcpio";
                            case "bdf":
                                return "application/x-font-bdf";
                            case "bdm":
                                return "application/vnd.syncml.dm+wbxml";
                            case "bed":
                                return "application/vnd.realvnc.bed";
                            case "bh2":
                                return "application/vnd.fujitsu.oasysprs";
                            case "bin":
                                return "application/octet-stream";
                            case "blb":
                                return "application/x-blorb";
                            case "blorb":
                                return "application/x-blorb";
                            case "bmi":
                                return "application/vnd.bmi";
                            case "bmp":
                                return "image/bmp";
                            case "book":
                                return "application/vnd.framemaker";
                            case "box":
                                return "application/vnd.previewsystems.box";
                            case "boz":
                                return "application/x-bzip2";
                            case "bpk":
                                return "application/octet-stream";
                            case "btif":
                                return "image/prs.btif";
                            case "bz":
                                return "application/x-bzip";
                            case "bz2":
                                return "application/x-bzip2";
                            case "c":
                                return "text/x-c";
                            case "c11amc":
                                return "application/vnd.cluetrust.cartomobile-config";
                            case "c11amz":
                                return "application/vnd.cluetrust.cartomobile-config-pkg";
                            case "c4d":
                                return "application/vnd.clonk.c4group";
                            case "c4f":
                                return "application/vnd.clonk.c4group";
                            case "c4g":
                                return "application/vnd.clonk.c4group";
                            case "c4p":
                                return "application/vnd.clonk.c4group";
                            case "c4u":
                                return "application/vnd.clonk.c4group";
                            case "cab":
                                return "application/vnd.ms-cab-compressed";
                            case "caf":
                                return "audio/x-caf";
                            case "cap":
                                return "application/vnd.tcpdump.pcap";
                            case "car":
                                return "application/vnd.curl.car";
                            case "cat":
                                return "application/vnd.ms-pki.seccat";
                            case "cb7":
                                return "application/x-cbr";
                            case "cba":
                                return "application/x-cbr";
                            case "cbr":
                                return "application/x-cbr";
                            case "cbt":
                                return "application/x-cbr";
                            case "cbz":
                                return "application/x-cbr";
                            case "cc":
                                return "text/x-c";
                            case "cct":
                                return "application/x-director";
                            case "ccxml":
                                return "application/ccxml+xml";
                            case "cdbcmsg":
                                return "application/vnd.contact.cmsg";
                            case "cdf":
                                return "application/x-netcdf";
                            case "cdkey":
                                return "application/vnd.mediastation.cdkey";
                            case "cdmia":
                                return "application/cdmi-capability";
                            case "cdmic":
                                return "application/cdmi-container";
                            case "cdmid":
                                return "application/cdmi-domain";
                            case "cdmio":
                                return "application/cdmi-object";
                            case "cdmiq":
                                return "application/cdmi-queue";
                            case "cdx":
                                return "chemical/x-cdx";
                            case "cdxml":
                                return "application/vnd.chemdraw+xml";
                            case "cdy":
                                return "application/vnd.cinderella";
                            case "cer":
                                return "application/pkix-cert";
                            case "cfs":
                                return "application/x-cfs-compressed";
                            case "cgm":
                                return "image/cgm";
                            case "chat":
                                return "application/x-chat";
                            case "chm":
                                return "application/vnd.ms-htmlhelp";
                            case "chrt":
                                return "application/vnd.kde.kchart";
                            case "cif":
                                return "chemical/x-cif";
                            case "cii":
                                return "application/vnd.anser-web-certificate-issue-initiation";
                            case "cil":
                                return "application/vnd.ms-artgalry";
                            case "cla":
                                return "application/vnd.claymore";
                            case "class":
                                return "application/java-vm";
                            case "clkk":
                                return "application/vnd.crick.clicker.keyboard";
                            case "clkp":
                                return "application/vnd.crick.clicker.palette";
                            case "clkt":
                                return "application/vnd.crick.clicker.template";
                            case "clkw":
                                return "application/vnd.crick.clicker.wordbank";
                            case "clkx":
                                return "application/vnd.crick.clicker";
                            case "clp":
                                return "application/x-msclip";
                            case "cmc":
                                return "application/vnd.cosmocaller";
                            case "cmdf":
                                return "chemical/x-cmdf";
                            case "cml":
                                return "chemical/x-cml";
                            case "cmp":
                                return "application/vnd.yellowriver-custom-menu";
                            case "cmx":
                                return "image/x-cmx";
                            case "cod":
                                return "application/vnd.rim.cod";
                            case "config":
                                return "text/xml";
                            case "com":
                                return "application/x-msdownload";
                            case "conf":
                                return "text/plain";
                            case "cpio":
                                return "application/x-cpio";
                            case "cpp":
                                return "text/x-c";
                            case "cpt":
                                return "application/mac-compactpro";
                            case "crd":
                                return "application/x-mscardfile";
                            case "crl":
                                return "application/pkix-crl";
                            case "crt":
                                return "application/x-x509-ca-cert";
                            case "cryptonote":
                                return "application/vnd.rig.cryptonote";
                            case "csh":
                                return "application/x-csh";
                            case "csml":
                                return "chemical/x-csml";
                            case "csp":
                                return "application/vnd.commonspace";
                            case "cs":
                                return "text/csharp";
                            case "css":
                                return "text/css";
                            case "cst":
                                return "application/x-director";
                            case "csv":
                                return "text/csv";
                            case "cu":
                                return "application/cu-seeme";
                            case "curl":
                                return "text/vnd.curl";
                            case "cww":
                                return "application/prs.cww";
                            case "cxt":
                                return "application/x-director";
                            case "cxx":
                                return "text/x-c";
                            case "dae":
                                return "model/vnd.collada+xml";
                            case "daf":
                                return "application/vnd.mobius.daf";
                            case "dart":
                                return "application/vnd.dart";
                            case "dataless":
                                return "application/vnd.fdsn.seed";
                            case "davmount":
                                return "application/davmount+xml";
                            case "dbk":
                                return "application/docbook+xml";
                            case "dcr":
                                return "application/x-director";
                            case "dcurl":
                                return "text/vnd.curl.dcurl";
                            case "dd2":
                                return "application/vnd.oma.dd2+xml";
                            case "ddd":
                                return "application/vnd.fujixerox.ddd";
                            case "deb":
                                return "application/x-debian-package";
                            case "def":
                                return "text/plain";
                            case "deploy":
                                return "application/octet-stream";
                            case "der":
                                return "application/x-x509-ca-cert";
                            case "dfac":
                                return "application/vnd.dreamfactory";
                            case "dgc":
                                return "application/x-dgc-compressed";
                            case "dic":
                                return "text/x-c";
                            case "dir":
                                return "application/x-director";
                            case "dis":
                                return "application/vnd.mobius.dis";
                            case "dist":
                                return "application/octet-stream";
                            case "distz":
                                return "application/octet-stream";
                            case "djv":
                                return "image/vnd.djvu";
                            case "djvu":
                                return "image/vnd.djvu";
                            case "dll":
                                return "application/x-msdownload";
                            case "dmg":
                                return "application/x-apple-diskimage";
                            case "dmp":
                                return "application/vnd.tcpdump.pcap";
                            case "dms":
                                return "application/octet-stream";
                            case "dna":
                                return "application/vnd.dna";
                            case "doc":
                                return "application/msword";
                            case "docm":
                                return "application/vnd.ms-word.document.macroenabled.12";
                            case "docx":
                                return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                            case "dot":
                                return "application/msword";
                            case "dotm":
                                return "application/vnd.ms-word.template.macroenabled.12";
                            case "dotx":
                                return "application/vnd.openxmlformats-officedocument.wordprocessingml.template";
                            case "dp":
                                return "application/vnd.osgi.dp";
                            case "dpg":
                                return "application/vnd.dpgraph";
                            case "dra":
                                return "audio/vnd.dra";
                            case "dsc":
                                return "text/prs.lines.tag";
                            case "dssc":
                                return "application/dssc+der";
                            case "dtb":
                                return "application/x-dtbook+xml";
                            case "dtd":
                                return "application/xml-dtd";
                            case "dts":
                                return "audio/vnd.dts";
                            case "dtshd":
                                return "audio/vnd.dts.hd";
                            case "dump":
                                return "application/octet-stream";
                            case "dvb":
                                return "video/vnd.dvb.file";
                            case "dvi":
                                return "application/x-dvi";
                            case "dwf":
                                return "model/vnd.dwf";
                            case "dwg":
                                return "image/vnd.dwg";
                            case "dxf":
                                return "image/vnd.dxf";
                            case "dxp":
                                return "application/vnd.spotfire.dxp";
                            case "dxr":
                                return "application/x-director";
                            case "ecelp4800":
                                return "audio/vnd.nuera.ecelp4800";
                            case "ecelp7470":
                                return "audio/vnd.nuera.ecelp7470";
                            case "ecelp9600":
                                return "audio/vnd.nuera.ecelp9600";
                            case "ecma":
                                return "application/ecmascript";
                            case "edm":
                                return "application/vnd.novadigm.edm";
                            case "edx":
                                return "application/vnd.novadigm.edx";
                            case "efif":
                                return "application/vnd.picsel";
                            case "ei6":
                                return "application/vnd.pg.osasli";
                            case "elc":
                                return "application/octet-stream";
                            case "emf":
                                return "application/x-msmetafile";
                            case "eml":
                                return "message/rfc822";
                            case "emma":
                                return "application/emma+xml";
                            case "emz":
                                return "application/x-msmetafile";
                            case "eol":
                                return "audio/vnd.digital-winds";
                            case "eot":
                                return "application/vnd.ms-fontobject";
                            case "eps":
                                return "application/postscript";
                            case "epub":
                                return "application/epub+zip";
                            case "es3":
                                return "application/vnd.eszigno3+xml";
                            case "esa":
                                return "application/vnd.osgi.subsystem";
                            case "esf":
                                return "application/vnd.epson.esf";
                            case "et3":
                                return "application/vnd.eszigno3+xml";
                            case "etx":
                                return "text/x-setext";
                            case "eva":
                                return "application/x-eva";
                            case "evy":
                                return "application/x-envoy";
                            case "exe":
                                return "application/x-msdownload";
                            case "exi":
                                return "application/exi";
                            case "ext":
                                return "application/vnd.novadigm.ext";
                            case "ez":
                                return "application/andrew-inset";
                            case "ez2":
                                return "application/vnd.ezpix-album";
                            case "ez3":
                                return "application/vnd.ezpix-package";
                            case "f":
                                return "text/x-fortran";
                            case "f4v":
                                return "video/x-f4v";
                            case "f77":
                                return "text/x-fortran";
                            case "f90":
                                return "text/x-fortran";
                            case "fbs":
                                return "image/vnd.fastbidsheet";
                            case "fcdt":
                                return "application/vnd.adobe.formscentral.fcdt";
                            case "fcs":
                                return "application/vnd.isac.fcs";
                            case "fdf":
                                return "application/vnd.fdf";
                            case "fe_launch":
                                return "application/vnd.denovo.fcselayout-link";
                            case "fg5":
                                return "application/vnd.fujitsu.oasysgp";
                            case "fgd":
                                return "application/x-director";
                            case "fh":
                                return "image/x-freehand";
                            case "fh4":
                                return "image/x-freehand";
                            case "fh5":
                                return "image/x-freehand";
                            case "fh7":
                                return "image/x-freehand";
                            case "fhc":
                                return "image/x-freehand";
                            case "fig":
                                return "application/x-xfig";
                            case "flac":
                                return "audio/x-flac";
                            case "fli":
                                return "video/x-fli";
                            case "flo":
                                return "application/vnd.micrografx.flo";
                            case "flv":
                                return "video/x-flv";
                            case "flw":
                                return "application/vnd.kde.kivio";
                            case "flx":
                                return "text/vnd.fmi.flexstor";
                            case "fly":
                                return "text/vnd.fly";
                            case "fm":
                                return "application/vnd.framemaker";
                            case "fnc":
                                return "application/vnd.frogans.fnc";
                            case "for":
                                return "text/x-fortran";
                            case "fpx":
                                return "image/vnd.fpx";
                            case "frame":
                                return "application/vnd.framemaker";
                            case "fsc":
                                return "application/vnd.fsc.weblaunch";
                            case "fst":
                                return "image/vnd.fst";
                            case "ftc":
                                return "application/vnd.fluxtime.clip";
                            case "fti":
                                return "application/vnd.anser-web-funds-transfer-initiation";
                            case "fvt":
                                return "video/vnd.fvt";
                            case "fxp":
                                return "application/vnd.adobe.fxp";
                            case "fxpl":
                                return "application/vnd.adobe.fxp";
                            case "fzs":
                                return "application/vnd.fuzzysheet";
                            case "g2w":
                                return "application/vnd.geoplan";
                            case "g3":
                                return "image/g3fax";
                            case "g3w":
                                return "application/vnd.geospace";
                            case "gac":
                                return "application/vnd.groove-account";
                            case "gam":
                                return "application/x-tads";
                            case "gbr":
                                return "application/rpki-ghostbusters";
                            case "gca":
                                return "application/x-gca-compressed";
                            case "gdl":
                                return "model/vnd.gdl";
                            case "geo":
                                return "application/vnd.dynageo";
                            case "gex":
                                return "application/vnd.geometry-explorer";
                            case "ggb":
                                return "application/vnd.geogebra.file";
                            case "ggt":
                                return "application/vnd.geogebra.tool";
                            case "ghf":
                                return "application/vnd.groove-help";
                            case "gif":
                                return "image/gif";
                            case "gim":
                                return "application/vnd.groove-identity-message";
                            case "gml":
                                return "application/gml+xml";
                            case "gmx":
                                return "application/vnd.gmx";
                            case "gnumeric":
                                return "application/x-gnumeric";
                            case "gph":
                                return "application/vnd.flographit";
                            case "gpx":
                                return "application/gpx+xml";
                            case "gqf":
                                return "application/vnd.grafeq";
                            case "gqs":
                                return "application/vnd.grafeq";
                            case "gram":
                                return "application/srgs";
                            case "gramps":
                                return "application/x-gramps-xml";
                            case "gre":
                                return "application/vnd.geometry-explorer";
                            case "grv":
                                return "application/vnd.groove-injector";
                            case "grxml":
                                return "application/srgs+xml";
                            case "gsf":
                                return "application/x-font-ghostscript";
                            case "gtar":
                                return "application/x-gtar";
                            case "gtm":
                                return "application/vnd.groove-tool-message";
                            case "gtw":
                                return "model/vnd.gtw";
                            case "gv":
                                return "text/vnd.graphviz";
                            case "gxf":
                                return "application/gxf";
                            case "gxt":
                                return "application/vnd.geonext";
                            case "h":
                                return "text/x-c";
                            case "h261":
                                return "video/h261";
                            case "h263":
                                return "video/h263";
                            case "h264":
                                return "video/h264";
                            case "hal":
                                return "application/vnd.hal+xml";
                            case "hbci":
                                return "application/vnd.hbci";
                            case "hdf":
                                return "application/x-hdf";
                            case "hh":
                                return "text/x-c";
                            case "hlp":
                                return "application/winhlp";
                            case "hpgl":
                                return "application/vnd.hp-hpgl";
                            case "hpid":
                                return "application/vnd.hp-hpid";
                            case "hps":
                                return "application/vnd.hp-hps";
                            case "hqx":
                                return "application/mac-binhex40";
                            case "htke":
                                return "application/vnd.kenameaapp";
                            case "htm":
                                return "text/html";
                            case "html":
                                return "text/html";
                            case "cshtml":
                                return "text/html";
                            case "hvd":
                                return "application/vnd.yamaha.hv-dic";
                            case "hvp":
                                return "application/vnd.yamaha.hv-voice";
                            case "hvs":
                                return "application/vnd.yamaha.hv-script";
                            case "i2g":
                                return "application/vnd.intergeo";
                            case "icc":
                                return "application/vnd.iccprofile";
                            case "ice":
                                return "x-conference/x-cooltalk";
                            case "icm":
                                return "application/vnd.iccprofile";
                            case "ico":
                                return "image/x-icon";
                            case "ics":
                                return "text/calendar";
                            case "ief":
                                return "image/ief";
                            case "ifb":
                                return "text/calendar";
                            case "ifm":
                                return "application/vnd.shana.informed.formdata";
                            case "iges":
                                return "model/iges";
                            case "igl":
                                return "application/vnd.igloader";
                            case "igm":
                                return "application/vnd.insors.igm";
                            case "igs":
                                return "model/iges";
                            case "igx":
                                return "application/vnd.micrografx.igx";
                            case "iif":
                                return "application/vnd.shana.informed.interchange";
                            case "imp":
                                return "application/vnd.accpac.simply.imp";
                            case "ims":
                                return "application/vnd.ms-ims";
                            case "in":
                                return "text/plain";
                            case "ink":
                                return "application/inkml+xml";
                            case "inkml":
                                return "application/inkml+xml";
                            case "install":
                                return "application/x-install-instructions";
                            case "iota":
                                return "application/vnd.astraea-software.iota";
                            case "ipfix":
                                return "application/ipfix";
                            case "ipk":
                                return "application/vnd.shana.informed.package";
                            case "irm":
                                return "application/vnd.ibm.rights-management";
                            case "irp":
                                return "application/vnd.irepository.package+xml";
                            case "iso":
                                return "application/x-iso9660-image";
                            case "itp":
                                return "application/vnd.shana.informed.formtemplate";
                            case "ivp":
                                return "application/vnd.immervision-ivp";
                            case "ivu":
                                return "application/vnd.immervision-ivu";
                            case "jad":
                                return "text/vnd.sun.j2me.app-descriptor";
                            case "jam":
                                return "application/vnd.jam";
                            case "jar":
                                return "application/java-archive";
                            case "java":
                                return "text/x-java-source";
                            case "jisp":
                                return "application/vnd.jisp";
                            case "jlt":
                                return "application/vnd.hp-jlyt";
                            case "jnlp":
                                return "application/x-java-jnlp-file";
                            case "joda":
                                return "application/vnd.joost.joda-archive";
                            case "jpe":
                                return "image/jpeg";
                            case "jpeg":
                                return "image/jpeg";
                            case "jpg":
                                return "image/jpeg";
                            case "jpgm":
                                return "video/jpm";
                            case "jpgv":
                                return "video/jpeg";
                            case "jpm":
                                return "video/jpm";
                            case "js":
                                return "application/javascript";
                            case "json":
                                return "application/json";
                            case "jsonml":
                                return "application/jsonml+json";
                            case "kar":
                                return "audio/midi";
                            case "karbon":
                                return "application/vnd.kde.karbon";
                            case "kfo":
                                return "application/vnd.kde.kformula";
                            case "kia":
                                return "application/vnd.kidspiration";
                            case "kml":
                                return "application/vnd.google-earth.kml+xml";
                            case "kmz":
                                return "application/vnd.google-earth.kmz";
                            case "kne":
                                return "application/vnd.kinar";
                            case "knp":
                                return "application/vnd.kinar";
                            case "kon":
                                return "application/vnd.kde.kontour";
                            case "kpr":
                                return "application/vnd.kde.kpresenter";
                            case "kpt":
                                return "application/vnd.kde.kpresenter";
                            case "kpxx":
                                return "application/vnd.ds-keypoint";
                            case "ksp":
                                return "application/vnd.kde.kspread";
                            case "ktr":
                                return "application/vnd.kahootz";
                            case "ktx":
                                return "image/ktx";
                            case "ktz":
                                return "application/vnd.kahootz";
                            case "kwd":
                                return "application/vnd.kde.kword";
                            case "kwt":
                                return "application/vnd.kde.kword";
                            case "lasxml":
                                return "application/vnd.las.las+xml";
                            case "latex":
                                return "application/x-latex";
                            case "lbd":
                                return "application/vnd.llamagraphics.life-balance.desktop";
                            case "lbe":
                                return "application/vnd.llamagraphics.life-balance.exchange+xml";
                            case "les":
                                return "application/vnd.hhe.lesson-player";
                            case "lha":
                                return "application/x-lzh-compressed";
                            case "link66":
                                return "application/vnd.route66.link66+xml";
                            case "list":
                                return "text/plain";
                            case "list3820":
                                return "application/vnd.ibm.modcap";
                            case "listafp":
                                return "application/vnd.ibm.modcap";
                            case "lnk":
                                return "application/x-ms-shortcut";
                            case "log":
                                return "text/plain";
                            case "lostxml":
                                return "application/lost+xml";
                            case "lrf":
                                return "application/octet-stream";
                            case "lrm":
                                return "application/vnd.ms-lrm";
                            case "ltf":
                                return "application/vnd.frogans.ltf";
                            case "lvp":
                                return "audio/vnd.lucent.voice";
                            case "lwp":
                                return "application/vnd.lotus-wordpro";
                            case "lzh":
                                return "application/x-lzh-compressed";
                            case "m13":
                                return "application/x-msmediaview";
                            case "m14":
                                return "application/x-msmediaview";
                            case "m1v":
                                return "video/mpeg";
                            case "m21":
                                return "application/mp21";
                            case "m2a":
                                return "audio/mpeg";
                            case "m2v":
                                return "video/mpeg";
                            case "m3a":
                                return "audio/mpeg";
                            case "m3u":
                                return "audio/x-mpegurl";
                            case "m3u8":
                                return "application/vnd.apple.mpegurl";
                            case "m4u":
                                return "video/vnd.mpegurl";
                            case "m4v":
                                return "video/x-m4v";
                            case "ma":
                                return "application/mathematica";
                            case "mads":
                                return "application/mads+xml";
                            case "mag":
                                return "application/vnd.ecowin.chart";
                            case "maker":
                                return "application/vnd.framemaker";
                            case "man":
                                return "text/troff";
                            case "mar":
                                return "application/octet-stream";
                            case "mathml":
                                return "application/mathml+xml";
                            case "mb":
                                return "application/mathematica";
                            case "mbk":
                                return "application/vnd.mobius.mbk";
                            case "mbox":
                                return "application/mbox";
                            case "mc1":
                                return "application/vnd.medcalcdata";
                            case "mcd":
                                return "application/vnd.mcd";
                            case "mcurl":
                                return "text/vnd.curl.mcurl";
                            case "mdb":
                                return "application/x-msaccess";
                            case "mdi":
                                return "image/vnd.ms-modi";
                            case "me":
                                return "text/troff";
                            case "mesh":
                                return "model/mesh";
                            case "meta4":
                                return "application/metalink4+xml";
                            case "metalink":
                                return "application/metalink+xml";
                            case "mets":
                                return "application/mets+xml";
                            case "mfm":
                                return "application/vnd.mfmp";
                            case "mft":
                                return "application/rpki-manifest";
                            case "mgp":
                                return "application/vnd.osgeo.mapguide.package";
                            case "mgz":
                                return "application/vnd.proteus.magazine";
                            case "mid":
                                return "audio/midi";
                            case "midi":
                                return "audio/midi";
                            case "mie":
                                return "application/x-mie";
                            case "mif":
                                return "application/vnd.mif";
                            case "mime":
                                return "message/rfc822";
                            case "mj2":
                                return "video/mj2";
                            case "mjp2":
                                return "video/mj2";
                            case "mk3d":
                                return "video/x-matroska";
                            case "mka":
                                return "audio/x-matroska";
                            case "mks":
                                return "video/x-matroska";
                            case "mkv":
                                return "video/x-matroska";
                            case "mlp":
                                return "application/vnd.dolby.mlp";
                            case "mmd":
                                return "application/vnd.chipnuts.karaoke-mmd";
                            case "mmf":
                                return "application/vnd.smaf";
                            case "mmr":
                                return "image/vnd.fujixerox.edmics-mmr";
                            case "mng":
                                return "video/x-mng";
                            case "mny":
                                return "application/x-msmoney";
                            case "mobi":
                                return "application/x-mobipocket-ebook";
                            case "mods":
                                return "application/mods+xml";
                            case "mov":
                                return "video/quicktime";
                            case "movie":
                                return "video/x-sgi-movie";
                            case "mp2":
                                return "audio/mpeg";
                            case "mp21":
                                return "application/mp21";
                            case "mp2a":
                                return "audio/mpeg";
                            case "mp3":
                                return "audio/mpeg";
                            case "mp4":
                                return "video/mp4";
                            case "mp4a":
                                return "audio/mp4";
                            case "mp4s":
                                return "application/mp4";
                            case "mp4v":
                                return "video/mp4";
                            case "mpc":
                                return "application/vnd.mophun.certificate";
                            case "mpe":
                                return "video/mpeg";
                            case "mpeg":
                                return "video/mpeg";
                            case "mpg":
                                return "video/mpeg";
                            case "mpg4":
                                return "video/mp4";
                            case "mpga":
                                return "audio/mpeg";
                            case "mpkg":
                                return "application/vnd.apple.installer+xml";
                            case "mpm":
                                return "application/vnd.blueice.multipass";
                            case "mpn":
                                return "application/vnd.mophun.application";
                            case "mpp":
                                return "application/vnd.ms-project";
                            case "mpt":
                                return "application/vnd.ms-project";
                            case "mpy":
                                return "application/vnd.ibm.minipay";
                            case "mqy":
                                return "application/vnd.mobius.mqy";
                            case "mrc":
                                return "application/marc";
                            case "mrcx":
                                return "application/marcxml+xml";
                            case "ms":
                                return "text/troff";
                            case "mscml":
                                return "application/mediaservercontrol+xml";
                            case "mseed":
                                return "application/vnd.fdsn.mseed";
                            case "mseq":
                                return "application/vnd.mseq";
                            case "msf":
                                return "application/vnd.epson.msf";
                            case "msh":
                                return "model/mesh";
                            case "msi":
                                return "application/x-msdownload";
                            case "msl":
                                return "application/vnd.mobius.msl";
                            case "msty":
                                return "application/vnd.muvee.style";
                            case "mts":
                                return "model/vnd.mts";
                            case "mus":
                                return "application/vnd.musician";
                            case "musicxml":
                                return "application/vnd.recordare.musicxml+xml";
                            case "mvb":
                                return "application/x-msmediaview";
                            case "mwf":
                                return "application/vnd.mfer";
                            case "mxf":
                                return "application/mxf";
                            case "mxl":
                                return "application/vnd.recordare.musicxml";
                            case "mxml":
                                return "application/xv+xml";
                            case "mxs":
                                return "application/vnd.triscape.mxs";
                            case "mxu":
                                return "video/vnd.mpegurl";
                            case "n3":
                                return "text/n3";
                            case "nb":
                                return "application/mathematica";
                            case "nbp":
                                return "application/vnd.wolfram.player";
                            case "nc":
                                return "application/x-netcdf";
                            case "ncx":
                                return "application/x-dtbncx+xml";
                            case "nfo":
                                return "text/x-nfo";
                            case "n-gage":
                                return "application/vnd.nokia.n-gage.symbian.install";
                            case "ngdat":
                                return "application/vnd.nokia.n-gage.data";
                            case "nitf":
                                return "application/vnd.nitf";
                            case "nlu":
                                return "application/vnd.neurolanguage.nlu";
                            case "nml":
                                return "application/vnd.enliven";
                            case "nnd":
                                return "application/vnd.noblenet-directory";
                            case "nns":
                                return "application/vnd.noblenet-sealer";
                            case "nnw":
                                return "application/vnd.noblenet-web";
                            case "npx":
                                return "image/vnd.net-fpx";
                            case "nsc":
                                return "application/x-conference";
                            case "nsf":
                                return "application/vnd.lotus-notes";
                            case "ntf":
                                return "application/vnd.nitf";
                            case "nzb":
                                return "application/x-nzb";
                            case "oa2":
                                return "application/vnd.fujitsu.oasys2";
                            case "oa3":
                                return "application/vnd.fujitsu.oasys3";
                            case "oas":
                                return "application/vnd.fujitsu.oasys";
                            case "obd":
                                return "application/x-msbinder";
                            case "obj":
                                return "application/x-tgif";
                            case "oda":
                                return "application/oda";
                            case "odb":
                                return "application/vnd.oasis.opendocument.database";
                            case "odc":
                                return "application/vnd.oasis.opendocument.chart";
                            case "odf":
                                return "application/vnd.oasis.opendocument.formula";
                            case "odft":
                                return "application/vnd.oasis.opendocument.formula-template";
                            case "odg":
                                return "application/vnd.oasis.opendocument.graphics";
                            case "odi":
                                return "application/vnd.oasis.opendocument.image";
                            case "odm":
                                return "application/vnd.oasis.opendocument.text-master";
                            case "odp":
                                return "application/vnd.oasis.opendocument.presentation";
                            case "ods":
                                return "application/vnd.oasis.opendocument.spreadsheet";
                            case "odt":
                                return "application/vnd.oasis.opendocument.text";
                            case "oga":
                                return "audio/ogg";
                            case "ogg":
                                return "audio/ogg";
                            case "ogv":
                                return "video/ogg";
                            case "ogx":
                                return "application/ogg";
                            case "omdoc":
                                return "application/omdoc+xml";
                            case "onepkg":
                                return "application/onenote";
                            case "onetmp":
                                return "application/onenote";
                            case "onetoc":
                                return "application/onenote";
                            case "onetoc2":
                                return "application/onenote";
                            case "opf":
                                return "application/oebps-package+xml";
                            case "opml":
                                return "text/x-opml";
                            case "oprc":
                                return "application/vnd.palm";
                            case "org":
                                return "application/vnd.lotus-organizer";
                            case "osf":
                                return "application/vnd.yamaha.openscoreformat";
                            case "osfpvg":
                                return "application/vnd.yamaha.openscoreformat.osfpvg+xml";
                            case "otc":
                                return "application/vnd.oasis.opendocument.chart-template";
                            case "otf":
                                return "application/x-font-otf";
                            case "otg":
                                return "application/vnd.oasis.opendocument.graphics-template";
                            case "oth":
                                return "application/vnd.oasis.opendocument.text-web";
                            case "oti":
                                return "application/vnd.oasis.opendocument.image-template";
                            case "otp":
                                return "application/vnd.oasis.opendocument.presentation-template";
                            case "ots":
                                return "application/vnd.oasis.opendocument.spreadsheet-template";
                            case "ott":
                                return "application/vnd.oasis.opendocument.text-template";
                            case "oxps":
                                return "application/oxps";
                            case "oxt":
                                return "application/vnd.openofficeorg.extension";
                            case "p":
                                return "text/x-pascal";
                            case "p10":
                                return "application/pkcs10";
                            case "p12":
                                return "application/x-pkcs12";
                            case "p7b":
                                return "application/x-pkcs7-certificates";
                            case "p7c":
                                return "application/pkcs7-mime";
                            case "p7m":
                                return "application/pkcs7-mime";
                            case "p7r":
                                return "application/x-pkcs7-certreqresp";
                            case "p7s":
                                return "application/pkcs7-signature";
                            case "p8":
                                return "application/pkcs8";
                            case "pas":
                                return "text/x-pascal";
                            case "paw":
                                return "application/vnd.pawaafile";
                            case "pbd":
                                return "application/vnd.powerbuilder6";
                            case "pbm":
                                return "image/x-portable-bitmap";
                            case "pcap":
                                return "application/vnd.tcpdump.pcap";
                            case "pcf":
                                return "application/x-font-pcf";
                            case "pcl":
                                return "application/vnd.hp-pcl";
                            case "pclxl":
                                return "application/vnd.hp-pclxl";
                            case "pct":
                                return "image/x-pict";
                            case "pcurl":
                                return "application/vnd.curl.pcurl";
                            case "pcx":
                                return "image/x-pcx";
                            case "pdb":
                                return "application/vnd.palm";
                            case "pdf":
                                return "application/pdf";
                            case "pfa":
                                return "application/x-font-type1";
                            case "pfb":
                                return "application/x-font-type1";
                            case "pfm":
                                return "application/x-font-type1";
                            case "pfr":
                                return "application/font-tdpfr";
                            case "pfx":
                                return "application/x-pkcs12";
                            case "pgm":
                                return "image/x-portable-graymap";
                            case "pgn":
                                return "application/x-chess-pgn";
                            case "pgp":
                                return "application/pgp-encrypted";
                            case "pic":
                                return "image/x-pict";
                            case "pkg":
                                return "application/octet-stream";
                            case "pki":
                                return "application/pkixcmp";
                            case "pkipath":
                                return "application/pkix-pkipath";
                            case "plb":
                                return "application/vnd.3gpp.pic-bw-large";
                            case "plc":
                                return "application/vnd.mobius.plc";
                            case "plf":
                                return "application/vnd.pocketlearn";
                            case "pls":
                                return "application/pls+xml";
                            case "pml":
                                return "application/vnd.ctc-posml";
                            case "png":
                                return "image/png";
                            case "pnm":
                                return "image/x-portable-anymap";
                            case "portpkg":
                                return "application/vnd.macports.portpkg";
                            case "pot":
                                return "application/vnd.ms-powerpoint";
                            case "potm":
                                return "application/vnd.ms-powerpoint.template.macroenabled.12";
                            case "potx":
                                return "application/vnd.openxmlformats-officedocument.presentationml.template";
                            case "ppam":
                                return "application/vnd.ms-powerpoint.addin.macroenabled.12";
                            case "ppd":
                                return "application/vnd.cups-ppd";
                            case "ppm":
                                return "image/x-portable-pixmap";
                            case "pps":
                                return "application/vnd.ms-powerpoint";
                            case "ppsm":
                                return "application/vnd.ms-powerpoint.slideshow.macroenabled.12";
                            case "ppsx":
                                return "application/vnd.openxmlformats-officedocument.presentationml.slideshow";
                            case "ppt":
                                return "application/vnd.ms-powerpoint";
                            case "pptm":
                                return "application/vnd.ms-powerpoint.presentation.macroenabled.12";
                            case "pptx":
                                return "application/vnd.openxmlformats-officedocument.presentationml.presentation";
                            case "pqa":
                                return "application/vnd.palm";
                            case "prc":
                                return "application/x-mobipocket-ebook";
                            case "pre":
                                return "application/vnd.lotus-freelance";
                            case "prf":
                                return "application/pics-rules";
                            case "ps":
                                return "application/postscript";
                            case "psb":
                                return "application/vnd.3gpp.pic-bw-small";
                            case "psd":
                                return "image/vnd.adobe.photoshop";
                            case "psf":
                                return "application/x-font-linux-psf";
                            case "pskcxml":
                                return "application/pskc+xml";
                            case "ptid":
                                return "application/vnd.pvi.ptid1";
                            case "pub":
                                return "application/x-mspublisher";
                            case "pvb":
                                return "application/vnd.3gpp.pic-bw-var";
                            case "pwn":
                                return "application/vnd.3m.post-it-notes";
                            case "pya":
                                return "audio/vnd.ms-playready.media.pya";
                            case "pyv":
                                return "video/vnd.ms-playready.media.pyv";
                            case "qam":
                                return "application/vnd.epson.quickanime";
                            case "qbo":
                                return "application/vnd.intu.qbo";
                            case "qfx":
                                return "application/vnd.intu.qfx";
                            case "qps":
                                return "application/vnd.publishare-delta-tree";
                            case "qt":
                                return "video/quicktime";
                            case "qwd":
                                return "application/vnd.quark.quarkxpress";
                            case "qwt":
                                return "application/vnd.quark.quarkxpress";
                            case "qxb":
                                return "application/vnd.quark.quarkxpress";
                            case "qxd":
                                return "application/vnd.quark.quarkxpress";
                            case "qxl":
                                return "application/vnd.quark.quarkxpress";
                            case "qxt":
                                return "application/vnd.quark.quarkxpress";
                            case "ra":
                                return "audio/x-pn-realaudio";
                            case "ram":
                                return "audio/x-pn-realaudio";
                            case "rar":
                                return "application/x-rar-compressed";
                            case "ras":
                                return "image/x-cmu-raster";
                            case "rcprofile":
                                return "application/vnd.ipunplugged.rcprofile";
                            case "rdf":
                                return "application/rdf+xml";
                            case "rdz":
                                return "application/vnd.data-vision.rdz";
                            case "rep":
                                return "application/vnd.businessobjects";
                            case "res":
                                return "application/x-dtbresource+xml";
                            case "rgb":
                                return "image/x-rgb";
                            case "rif":
                                return "application/reginfo+xml";
                            case "rip":
                                return "audio/vnd.rip";
                            case "ris":
                                return "application/x-research-info-systems";
                            case "rl":
                                return "application/resource-lists+xml";
                            case "rlc":
                                return "image/vnd.fujixerox.edmics-rlc";
                            case "rld":
                                return "application/resource-lists-diff+xml";
                            case "rm":
                                return "application/vnd.rn-realmedia";
                            case "rmi":
                                return "audio/midi";
                            case "rmp":
                                return "audio/x-pn-realaudio-plugin";
                            case "rms":
                                return "application/vnd.jcp.javame.midlet-rms";
                            case "rmvb":
                                return "application/vnd.rn-realmedia-vbr";
                            case "rnc":
                                return "application/relax-ng-compact-syntax";
                            case "roa":
                                return "application/rpki-roa";
                            case "roff":
                                return "text/troff";
                            case "rp9":
                                return "application/vnd.cloanto.rp9";
                            case "rpss":
                                return "application/vnd.nokia.radio-presets";
                            case "rpst":
                                return "application/vnd.nokia.radio-preset";
                            case "rq":
                                return "application/sparql-query";
                            case "rs":
                                return "application/rls-services+xml";
                            case "rsd":
                                return "application/rsd+xml";
                            case "rss":
                                return "application/rss+xml";
                            case "rtf":
                                return "application/rtf";
                            case "rtx":
                                return "text/richtext";
                            case "s":
                                return "text/x-asm";
                            case "s3m":
                                return "audio/s3m";
                            case "saf":
                                return "application/vnd.yamaha.smaf-audio";
                            case "sbml":
                                return "application/sbml+xml";
                            case "sc":
                                return "application/vnd.ibm.secure-container";
                            case "scd":
                                return "application/x-msschedule";
                            case "scm":
                                return "application/vnd.lotus-screencam";
                            case "scq":
                                return "application/scvp-cv-request";
                            case "scs":
                                return "application/scvp-cv-response";
                            case "scurl":
                                return "text/vnd.curl.scurl";
                            case "sda":
                                return "application/vnd.stardivision.draw";
                            case "sdc":
                                return "application/vnd.stardivision.calc";
                            case "sdd":
                                return "application/vnd.stardivision.impress";
                            case "sdkd":
                                return "application/vnd.solent.sdkm+xml";
                            case "sdkm":
                                return "application/vnd.solent.sdkm+xml";
                            case "sdp":
                                return "application/sdp";
                            case "sdw":
                                return "application/vnd.stardivision.writer";
                            case "see":
                                return "application/vnd.seemail";
                            case "seed":
                                return "application/vnd.fdsn.seed";
                            case "sema":
                                return "application/vnd.sema";
                            case "semd":
                                return "application/vnd.semd";
                            case "semf":
                                return "application/vnd.semf";
                            case "ser":
                                return "application/java-serialized-object";
                            case "setpay":
                                return "application/set-payment-initiation";
                            case "setreg":
                                return "application/set-registration-initiation";
                            case "sfd-hdstx":
                                return "application/vnd.hydrostatix.sof-data";
                            case "sfs":
                                return "application/vnd.spotfire.sfs";
                            case "sfv":
                                return "text/x-sfv";
                            case "sgi":
                                return "image/sgi";
                            case "sgl":
                                return "application/vnd.stardivision.writer-global";
                            case "sgm":
                                return "text/sgml";
                            case "sgml":
                                return "text/sgml";
                            case "sh":
                                return "application/x-sh";
                            case "shar":
                                return "application/x-shar";
                            case "shf":
                                return "application/shf+xml";
                            case "sid":
                                return "image/x-mrsid-image";
                            case "sig":
                                return "application/pgp-signature";
                            case "sil":
                                return "audio/silk";
                            case "silo":
                                return "model/mesh";
                            case "sis":
                                return "application/vnd.symbian.install";
                            case "sisx":
                                return "application/vnd.symbian.install";
                            case "sit":
                                return "application/x-stuffit";
                            case "sitx":
                                return "application/x-stuffitx";
                            case "skd":
                                return "application/vnd.koan";
                            case "skm":
                                return "application/vnd.koan";
                            case "skp":
                                return "application/vnd.koan";
                            case "skt":
                                return "application/vnd.koan";
                            case "sldm":
                                return "application/vnd.ms-powerpoint.slide.macroenabled.12";
                            case "sldx":
                                return "application/vnd.openxmlformats-officedocument.presentationml.slide";
                            case "slt":
                                return "application/vnd.epson.salt";
                            case "sm":
                                return "application/vnd.stepmania.stepchart";
                            case "smf":
                                return "application/vnd.stardivision.math";
                            case "smi":
                                return "application/smil+xml";
                            case "smil":
                                return "application/smil+xml";
                            case "smv":
                                return "video/x-smv";
                            case "smzip":
                                return "application/vnd.stepmania.package";
                            case "snd":
                                return "audio/basic";
                            case "snf":
                                return "application/x-font-snf";
                            case "so":
                                return "application/octet-stream";
                            case "spc":
                                return "application/x-pkcs7-certificates";
                            case "spf":
                                return "application/vnd.yamaha.smaf-phrase";
                            case "spl":
                                return "application/x-futuresplash";
                            case "spot":
                                return "text/vnd.in3d.spot";
                            case "spp":
                                return "application/scvp-vp-response";
                            case "spq":
                                return "application/scvp-vp-request";
                            case "spx":
                                return "audio/ogg";
                            case "sql":
                                return "application/x-sql";
                            case "src":
                                return "application/x-wais-source";
                            case "srt":
                                return "application/x-subrip";
                            case "sru":
                                return "application/sru+xml";
                            case "srx":
                                return "application/sparql-results+xml";
                            case "ssdl":
                                return "application/ssdl+xml";
                            case "sse":
                                return "application/vnd.kodak-descriptor";
                            case "ssf":
                                return "application/vnd.epson.ssf";
                            case "ssml":
                                return "application/ssml+xml";
                            case "st":
                                return "application/vnd.sailingtracker.track";
                            case "stc":
                                return "application/vnd.sun.xml.calc.template";
                            case "std":
                                return "application/vnd.sun.xml.draw.template";
                            case "stf":
                                return "application/vnd.wt.stf";
                            case "sti":
                                return "application/vnd.sun.xml.impress.template";
                            case "stk":
                                return "application/hyperstudio";
                            case "stl":
                                return "application/vnd.ms-pki.stl";
                            case "str":
                                return "application/vnd.pg.format";
                            case "stw":
                                return "application/vnd.sun.xml.writer.template";
                            case "sub":
                                return "text/vnd.dvb.subtitle";
                            case "sus":
                                return "application/vnd.sus-calendar";
                            case "susp":
                                return "application/vnd.sus-calendar";
                            case "sv4cpio":
                                return "application/x-sv4cpio";
                            case "sv4crc":
                                return "application/x-sv4crc";
                            case "svc":
                                return "application/vnd.dvb.service";
                            case "svd":
                                return "application/vnd.svd";
                            case "svg":
                                return "image/svg+xml";
                            case "svgz":
                                return "image/svg+xml";
                            case "swa":
                                return "application/x-director";
                            case "swf":
                                return "application/x-shockwave-flash";
                            case "swi":
                                return "application/vnd.aristanetworks.swi";
                            case "sxc":
                                return "application/vnd.sun.xml.calc";
                            case "sxd":
                                return "application/vnd.sun.xml.draw";
                            case "sxg":
                                return "application/vnd.sun.xml.writer.global";
                            case "sxi":
                                return "application/vnd.sun.xml.impress";
                            case "sxm":
                                return "application/vnd.sun.xml.math";
                            case "sxw":
                                return "application/vnd.sun.xml.writer";
                            case "t":
                                return "text/troff";
                            case "t3":
                                return "application/x-t3vm-image";
                            case "taglet":
                                return "application/vnd.mynfc";
                            case "tao":
                                return "application/vnd.tao.intent-module-archive";
                            case "tar":
                                return "application/x-tar";
                            case "tcap":
                                return "application/vnd.3gpp2.tcap";
                            case "tcl":
                                return "application/x-tcl";
                            case "teacher":
                                return "application/vnd.smart.teacher";
                            case "tei":
                                return "application/tei+xml";
                            case "teicorpus":
                                return "application/tei+xml";
                            case "tex":
                                return "application/x-tex";
                            case "texi":
                                return "application/x-texinfo";
                            case "texinfo":
                                return "application/x-texinfo";
                            case "text":
                                return "text/plain";
                            case "tfi":
                                return "application/thraud+xml";
                            case "tfm":
                                return "application/x-tex-tfm";
                            case "tga":
                                return "image/x-tga";
                            case "thmx":
                                return "application/vnd.ms-officetheme";
                            case "tif":
                                return "image/tiff";
                            case "tiff":
                                return "image/tiff";
                            case "tmo":
                                return "application/vnd.tmobile-livetv";
                            case "torrent":
                                return "application/x-bittorrent";
                            case "tpl":
                                return "application/vnd.groove-tool-template";
                            case "tpt":
                                return "application/vnd.trid.tpt";
                            case "tr":
                                return "text/troff";
                            case "tra":
                                return "application/vnd.trueapp";
                            case "trm":
                                return "application/x-msterminal";
                            case "ts":
                                return "application/typescript";
                            case "tsd":
                                return "application/timestamped-data";
                            case "tsv":
                                return "text/tab-separated-values";
                            case "ttc":
                                return "application/x-font-ttf";
                            case "ttf":
                                return "application/x-font-ttf";
                            case "ttl":
                                return "text/turtle";
                            case "twd":
                                return "application/vnd.simtech-mindmapper";
                            case "twds":
                                return "application/vnd.simtech-mindmapper";
                            case "txd":
                                return "application/vnd.genomatix.tuxedo";
                            case "txf":
                                return "application/vnd.mobius.txf";
                            case "txt":
                                return "text/plain";
                            case "u32":
                                return "application/x-authorware-bin";
                            case "udeb":
                                return "application/x-debian-package";
                            case "ufd":
                                return "application/vnd.ufdl";
                            case "ufdl":
                                return "application/vnd.ufdl";
                            case "ulx":
                                return "application/x-glulx";
                            case "umj":
                                return "application/vnd.umajin";
                            case "unityweb":
                                return "application/vnd.unity";
                            case "uoml":
                                return "application/vnd.uoml+xml";
                            case "uri":
                                return "text/uri-list";
                            case "uris":
                                return "text/uri-list";
                            case "urls":
                                return "text/uri-list";
                            case "ustar":
                                return "application/x-ustar";
                            case "utz":
                                return "application/vnd.uiq.theme";
                            case "uu":
                                return "text/x-uuencode";
                            case "uva":
                                return "audio/vnd.dece.audio";
                            case "uvd":
                                return "application/vnd.dece.data";
                            case "uvf":
                                return "application/vnd.dece.data";
                            case "uvg":
                                return "image/vnd.dece.graphic";
                            case "uvh":
                                return "video/vnd.dece.hd";
                            case "uvi":
                                return "image/vnd.dece.graphic";
                            case "uvm":
                                return "video/vnd.dece.mobile";
                            case "uvp":
                                return "video/vnd.dece.pd";
                            case "uvs":
                                return "video/vnd.dece.sd";
                            case "uvt":
                                return "application/vnd.dece.ttml+xml";
                            case "uvu":
                                return "video/vnd.uvvu.mp4";
                            case "uvv":
                                return "video/vnd.dece.video";
                            case "uvva":
                                return "audio/vnd.dece.audio";
                            case "uvvd":
                                return "application/vnd.dece.data";
                            case "uvvf":
                                return "application/vnd.dece.data";
                            case "uvvg":
                                return "image/vnd.dece.graphic";
                            case "uvvh":
                                return "video/vnd.dece.hd";
                            case "uvvi":
                                return "image/vnd.dece.graphic";
                            case "uvvm":
                                return "video/vnd.dece.mobile";
                            case "uvvp":
                                return "video/vnd.dece.pd";
                            case "uvvs":
                                return "video/vnd.dece.sd";
                            case "uvvt":
                                return "application/vnd.dece.ttml+xml";
                            case "uvvu":
                                return "video/vnd.uvvu.mp4";
                            case "uvvv":
                                return "video/vnd.dece.video";
                            case "uvvx":
                                return "application/vnd.dece.unspecified";
                            case "uvvz":
                                return "application/vnd.dece.zip";
                            case "uvx":
                                return "application/vnd.dece.unspecified";
                            case "uvz":
                                return "application/vnd.dece.zip";
                            case "vcard":
                                return "text/vcard";
                            case "vcd":
                                return "application/x-cdlink";
                            case "vcf":
                                return "text/x-vcard";
                            case "vcg":
                                return "application/vnd.groove-vcard";
                            case "vcs":
                                return "text/x-vcalendar";
                            case "vcx":
                                return "application/vnd.vcx";
                            case "vis":
                                return "application/vnd.visionary";
                            case "viv":
                                return "video/vnd.vivo";
                            case "vob":
                                return "video/x-ms-vob";
                            case "vor":
                                return "application/vnd.stardivision.writer";
                            case "vox":
                                return "application/x-authorware-bin";
                            case "vrml":
                                return "model/vrml";
                            case "vsd":
                                return "application/vnd.visio";
                            case "vsf":
                                return "application/vnd.vsf";
                            case "vss":
                                return "application/vnd.visio";
                            case "vst":
                                return "application/vnd.visio";
                            case "vsw":
                                return "application/vnd.visio";
                            case "vtu":
                                return "model/vnd.vtu";
                            case "vxml":
                                return "application/voicexml+xml";
                            case "w3d":
                                return "application/x-director";
                            case "wad":
                                return "application/x-doom";
                            case "wav":
                                return "audio/x-wav";
                            case "wax":
                                return "audio/x-ms-wax";
                            case "wbmp":
                                return "image/vnd.wap.wbmp";
                            case "wbs":
                                return "application/vnd.criticaltools.wbs+xml";
                            case "wbxml":
                                return "application/vnd.wap.wbxml";
                            case "wcm":
                                return "application/vnd.ms-works";
                            case "wdb":
                                return "application/vnd.ms-works";
                            case "wdp":
                                return "image/vnd.ms-photo";
                            case "weba":
                                return "audio/webm";
                            case "webm":
                                return "video/webm";
                            case "webp":
                                return "image/webp";
                            case "wg":
                                return "application/vnd.pmi.widget";
                            case "wgt":
                                return "application/widget";
                            case "wks":
                                return "application/vnd.ms-works";
                            case "wm":
                                return "video/x-ms-wm";
                            case "wma":
                                return "audio/x-ms-wma";
                            case "wmd":
                                return "application/x-ms-wmd";
                            case "wmf":
                                return "application/x-msmetafile";
                            case "wml":
                                return "text/vnd.wap.wml";
                            case "wmlc":
                                return "application/vnd.wap.wmlc";
                            case "wmls":
                                return "text/vnd.wap.wmlscript";
                            case "wmlsc":
                                return "application/vnd.wap.wmlscriptc";
                            case "wmv":
                                return "video/x-ms-wmv";
                            case "wmx":
                                return "video/x-ms-wmx";
                            case "wmz":
                                return "application/x-msmetafile";
                            case "woff":
                                return "application/x-font-woff";
                            case "wpd":
                                return "application/vnd.wordperfect";
                            case "wpl":
                                return "application/vnd.ms-wpl";
                            case "wps":
                                return "application/vnd.ms-works";
                            case "wqd":
                                return "application/vnd.wqd";
                            case "wri":
                                return "application/x-mswrite";
                            case "wrl":
                                return "model/vrml";
                            case "wsdl":
                                return "application/wsdl+xml";
                            case "wspolicy":
                                return "application/wspolicy+xml";
                            case "wtb":
                                return "application/vnd.webturbo";
                            case "wvx":
                                return "video/x-ms-wvx";
                            case "x32":
                                return "application/x-authorware-bin";
                            case "x3d":
                                return "model/x3d+xml";
                            case "x3db":
                                return "model/x3d+binary";
                            case "x3dbz":
                                return "model/x3d+binary";
                            case "x3dv":
                                return "model/x3d+vrml";
                            case "x3dvz":
                                return "model/x3d+vrml";
                            case "x3dz":
                                return "model/x3d+xml";
                            case "xaml":
                                return "application/xaml+xml";
                            case "xap":
                                return "application/x-silverlight-app";
                            case "xar":
                                return "application/vnd.xara";
                            case "xbap":
                                return "application/x-ms-xbap";
                            case "xbd":
                                return "application/vnd.fujixerox.docuworks.binder";
                            case "xbm":
                                return "image/x-xbitmap";
                            case "xdf":
                                return "application/xcap-diff+xml";
                            case "xdm":
                                return "application/vnd.syncml.dm+xml";
                            case "xdp":
                                return "application/vnd.adobe.xdp+xml";
                            case "xdssc":
                                return "application/dssc+xml";
                            case "xdw":
                                return "application/vnd.fujixerox.docuworks";
                            case "xenc":
                                return "application/xenc+xml";
                            case "xer":
                                return "application/patch-ops-error+xml";
                            case "xfdf":
                                return "application/vnd.adobe.xfdf";
                            case "xfdl":
                                return "application/vnd.xfdl";
                            case "xht":
                                return "application/xhtml+xml";
                            case "xhtml":
                                return "application/xhtml+xml";
                            case "xhvml":
                                return "application/xv+xml";
                            case "xif":
                                return "image/vnd.xiff";
                            case "xla":
                                return "application/vnd.ms-excel";
                            case "xlam":
                                return "application/vnd.ms-excel.addin.macroenabled.12";
                            case "xlc":
                                return "application/vnd.ms-excel";
                            case "xlf":
                                return "application/x-xliff+xml";
                            case "xlm":
                                return "application/vnd.ms-excel";
                            case "xls":
                                return "application/vnd.ms-excel";
                            case "xlsb":
                                return "application/vnd.ms-excel.sheet.binary.macroenabled.12";
                            case "xlsm":
                                return "application/vnd.ms-excel.sheet.macroenabled.12";
                            case "xlsx":
                                return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                            case "xlt":
                                return "application/vnd.ms-excel";
                            case "xltm":
                                return "application/vnd.ms-excel.template.macroenabled.12";
                            case "xltx":
                                return "application/vnd.openxmlformats-officedocument.spreadsheetml.template";
                            case "xlw":
                                return "application/vnd.ms-excel";
                            case "xm":
                                return "audio/xm";
                            case "xml":
                                return "application/xml";
                            case "xo":
                                return "application/vnd.olpc-sugar";
                            case "xop":
                                return "application/xop+xml";
                            case "xpi":
                                return "application/x-xpinstall";
                            case "xpl":
                                return "application/xproc+xml";
                            case "xpm":
                                return "image/x-xpixmap";
                            case "xpr":
                                return "application/vnd.is-xpr";
                            case "xps":
                                return "application/vnd.ms-xpsdocument";
                            case "xpw":
                                return "application/vnd.intercon.formnet";
                            case "xpx":
                                return "application/vnd.intercon.formnet";
                            case "xsl":
                                return "application/xml";
                            case "xslt":
                                return "application/xslt+xml";
                            case "xsm":
                                return "application/vnd.syncml+xml";
                            case "xspf":
                                return "application/xspf+xml";
                            case "xul":
                                return "application/vnd.mozilla.xul+xml";
                            case "xvm":
                                return "application/xv+xml";
                            case "xvml":
                                return "application/xv+xml";
                            case "xwd":
                                return "image/x-xwindowdump";
                            case "xyz":
                                return "chemical/x-xyz";
                            case "xz":
                                return "application/x-xz";
                            case "yang":
                                return "application/yang";
                            case "yin":
                                return "application/yin+xml";
                            case "z1":
                                return "application/x-zmachine";
                            case "z2":
                                return "application/x-zmachine";
                            case "z3":
                                return "application/x-zmachine";
                            case "z4":
                                return "application/x-zmachine";
                            case "z5":
                                return "application/x-zmachine";
                            case "z6":
                                return "application/x-zmachine";
                            case "z7":
                                return "application/x-zmachine";
                            case "z8":
                                return "application/x-zmachine";
                            case "zaz":
                                return "application/vnd.zzazz.deck+xml";
                            case "zip":
                                return "application/zip";
                            case "zir":
                                return "application/vnd.zul";
                            case "zirz":
                                return "application/vnd.zul";
                            case "zmm":
                                return "application/vnd.handheld-entertainment+xml";
                            default:
                                return "application/octet-stream";
                        }
                    }

                    return "application/octet-stream";
                };
                return Mime;
            })();
            media.Mime = Mime;
        })(web.media || (web.media = {}));
        var media = web.media;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
//@ sourceMappingURL=Mime.js.map
var appex;
(function (appex) {
    (function (timers) {
        var StopWatch = (function () {
            function StopWatch() {
                this.start();
            }
            StopWatch.prototype.start = function () {
                this.starttime = new Date();
            };

            StopWatch.prototype.stop = function () {
                var stoptime = new Date();

                var offset = stoptime.getMilliseconds() - this.starttime.getMilliseconds();

                if (offset < 0)
                    offset = -offset;

                return offset;
            };
            return StopWatch;
        })();
        timers.StopWatch = StopWatch;
    })(appex.timers || (appex.timers = {}));
    var timers = appex.timers;
})(appex || (appex = {}));
//@ sourceMappingURL=StopWatch.js.map
//@ sourceMappingURL=IModuleExport.js.map
//@ sourceMappingURL=IModule.js.map
var appex;
(function (appex) {
    (function (modules) {
        var ModuleExport = (function () {
            function ModuleExport(module, type) {
                this.module = module;

                this.type = type;

                this._accessor = null;

                this._accessor_checked = false;

                this._cascade = null;

                this._cascade_checked = false;
            }
            ModuleExport.prototype.cascade = function () {
                var that = this;

                var lookup = function (qualifier) {
                    var _cascades = that.module.cascades.slice(0);

                    for (var n in _cascades) {
                        if (_cascades[n].name == qualifier) {
                            return require('util')._extend({}, _cascades[n].value);
                        }
                    }

                    return null;
                };

                if (this._cascade_checked) {
                    return this._cascade;
                } else {
                    var scope = this.type.scope;

                    if (scope.length > 0) {
                        if (scope[0].indexOf('"') !== -1) {
                            scope = scope.slice(1);
                        }
                    }

                    scope.push(this.type.name);

                    var _cascade = lookup('');

                    if (_cascade == null) {
                        _cascade = {};
                    }

                    var stack = [];

                    for (var n in scope) {
                        stack.push(scope[n]);

                        var qualifier = stack.join('.');

                        var obj = lookup(qualifier);

                        if (obj) {
                            for (var m in obj) {
                                _cascade[m] = obj[m];
                            }
                        }
                    }

                    this._cascade = _cascade;

                    this._cascade_checked = true;

                    return _cascade;
                }
            };

            ModuleExport.prototype.accessor = function () {
                if (this._accessor_checked) {
                    return this._accessor;
                } else {
                    if (this.module != null) {
                        if (this.module.context != null) {
                            if (this.module.context.exports != null) {
                                var accessor = this.module.context.exports;

                                var scope = this.type.scope;

                                if (scope.length > 0) {
                                    if (scope[0].indexOf('"') !== -1) {
                                        scope = scope.slice(1);
                                    }
                                }

                                for (var n in scope) {
                                    accessor = accessor[scope[n]];

                                    if (accessor == null) {
                                        this._accessor_checked = true;

                                        return null;
                                    }
                                }

                                if (accessor[this.type.name]) {
                                    this._accessor = accessor[this.type.name];

                                    return this._accessor;
                                }
                            }
                        }
                    }
                }

                this._accessor_checked = true;

                return null;
            };
            return ModuleExport;
        })();
        modules.ModuleExport = ModuleExport;
    })(appex.modules || (appex.modules = {}));
    var modules = appex.modules;
})(appex || (appex = {}));
//@ sourceMappingURL=ModuleExport.js.map
var appex;
(function (appex) {
    (function (modules) {
        var Reflection = (function () {
            function Reflection(scripts) {
                this.scripts = scripts;
            }
            Reflection.prototype.get = function (qualifier) {
                var stack = [];

                for (var n in this.scripts) {
                    var reflected_type = this.scan_script(qualifier, stack, this.scripts[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                return null;
            };

            Reflection.prototype.scan_variable = function (qualifier, stack, variable) {
                stack.push(variable.name);

                if (qualifier == stack.join('.')) {
                    return variable;
                }

                stack.pop();

                return null;
            };

            Reflection.prototype.scan_method = function (qualifier, stack, method) {
                stack.push(method.name);

                if (qualifier == stack.join('.')) {
                    return method;
                }

                stack.pop();

                return null;
            };

            Reflection.prototype.scan_class = function (qualifier, stack, _class) {
                stack.push(_class.name);

                if (qualifier == stack.join('.')) {
                    return _class;
                }

                for (var n in _class.methods) {
                    var reflected_type = this.scan_method(qualifier, stack, _class.methods[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _class.variables) {
                    var reflected_type = this.scan_variable(qualifier, stack, _class.variables[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                stack.pop();

                return null;
            };

            Reflection.prototype.scan_interface = function (qualifier, stack, _interface) {
                stack.push(_interface.name);

                if (qualifier == stack.join('.')) {
                    return _interface;
                }

                for (var n in _interface.methods) {
                    var reflected_type = this.scan_method(qualifier, stack, _interface.methods[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _interface.variables) {
                    var reflected_type = this.scan_variable(qualifier, stack, _interface.variables[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                stack.pop();

                return null;
            };

            Reflection.prototype.scan_import = function (qualifier, stack, _import) {
                stack.push(_import.name);

                if (qualifier == stack.join('.')) {
                    return _import;
                }

                stack.pop();

                return null;
            };

            Reflection.prototype.scan_module = function (qualifier, stack, _module) {
                if (_module.name.indexOf('\"') == -1) {
                    stack.push(_module.name);
                }

                if (qualifier == stack.join('.')) {
                    return _module;
                }

                for (var n in _module.modules) {
                    var reflected_type = this.scan_module(qualifier, stack, _module.modules[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _module.imports) {
                    var reflected_type = this.scan_import(qualifier, stack, _module.imports[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _module.interfaces) {
                    var reflected_type = this.scan_interface(qualifier, stack, _module.interfaces[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _module.classes) {
                    var reflected_type = this.scan_class(qualifier, stack, _module.classes[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _module.methods) {
                    var reflected_type = this.scan_method(qualifier, stack, _module.methods[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _module.variables) {
                    var reflected_type = this.scan_variable(qualifier, stack, _module.variables[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                if (_module.name.indexOf('\"') == -1) {
                    stack.pop();
                }

                return null;
            };

            Reflection.prototype.scan_script = function (qualifier, stack, script) {
                for (var n in script.modules) {
                    var reflected_type = this.scan_module(qualifier, stack, script.modules[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in script.interfaces) {
                    var reflected_type = this.scan_interface(qualifier, stack, script.interfaces[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in script.classes) {
                    var reflected_type = this.scan_class(qualifier, stack, script.classes[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in script.methods) {
                    var reflected_type = this.scan_method(qualifier, stack, script.methods[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in script.variables) {
                    var reflected_type = this.scan_variable(qualifier, stack, script.variables[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                return null;
            };
            return Reflection;
        })();
        modules.Reflection = Reflection;
    })(appex.modules || (appex.modules = {}));
    var modules = appex.modules;
})(appex || (appex = {}));
//@ sourceMappingURL=Reflection.js.map
var appex;
(function (appex) {
    (function (modules) {
        var Cascade = (function () {
            function Cascade() {
            }
            return Cascade;
        })();
        modules.Cascade = Cascade;

        var Module = (function () {
            function Module(compilerResult) {
                this.javascript = compilerResult.javascript;

                this.diagnostics = compilerResult.diagnostics;

                this.reflection = new appex.modules.Reflection(compilerResult.scripts);

                this.cascades = [];

                this.load_vm();

                this.load_exports();
            }
            Module.prototype.load_vm = function () {
                var that = this;

                this.context = {
                    __dirname: node.path.dirname(process.mainModule.filename),
                    __filename: node.path.join(node.path.dirname(process.mainModule.filename), "appex.module.js"),
                    global: global,
                    process: process,
                    require: require,
                    console: console,
                    exports: {},
                    module: {},
                    cascade: function () {
                        var params = [];
                        for (var _i = 0; _i < (arguments.length - 0); _i++) {
                            params[_i] = arguments[_i + 0];
                        }
                        if (params.length == 1) {
                            var cascade = new Cascade();

                            cascade.name = '';

                            cascade.value = params[0];

                            that.cascades.push(cascade);
                        }

                        if (params.length == 2) {
                            var cascade = new Cascade();

                            cascade.name = params[0];

                            cascade.value = params[1];

                            that.cascades.push(cascade);
                        }
                    }
                };

                var script = require("vm").createScript(this.javascript, 'appex.module.js');

                script.runInNewContext(this.context);
            };

            Module.prototype.load_exports = function () {
                this.exports = [];

                var scope = [];

                for (var n in this.reflection.scripts) {
                    this.load_script(this.reflection.scripts[n]);
                }
            };

            Module.prototype.load_variable = function (variable) {
                if (variable.isExported) {
                    this.exports.push(new appex.modules.ModuleExport(this, variable));
                }
            };

            Module.prototype.load_parameter = function (parameter) {
            };

            Module.prototype.load_method = function (method) {
                if (method.isExported) {
                    this.exports.push(new appex.modules.ModuleExport(this, method));

                    for (var n in method.parameters) {
                        this.load_parameter(method.parameters[n]);
                    }
                }
            };

            Module.prototype.load_class = function (_class) {
                if (_class.isExported) {
                    this.exports.push(new appex.modules.ModuleExport(this, _class));

                    for (var n in _class.methods) {
                        this.load_method(_class.methods[n]);
                    }

                    for (var n in _class.variables) {
                        this.load_variable(_class.variables[n]);
                    }
                }
            };

            Module.prototype.load_interface = function (_interface) {
                if (_interface.isExported) {
                    this.exports.push(new appex.modules.ModuleExport(this, _interface));

                    for (var n in _interface.methods) {
                        this.load_method(_interface.methods[n]);
                    }

                    for (var n in _interface.variables) {
                        this.load_variable(_interface.variables[n]);
                    }
                }
            };

            Module.prototype.load_import = function (_import) {
            };

            Module.prototype.load_module = function (_module) {
                if (_module.isExported) {
                    for (var n in _module.modules) {
                        this.load_module(_module.modules[n]);
                    }

                    for (var n in _module.imports) {
                        this.load_import(_module.imports[n]);
                    }

                    for (var n in _module.interfaces) {
                        this.load_interface(_module.interfaces[n]);
                    }

                    for (var n in _module.classes) {
                        this.load_class(_module.classes[n]);
                    }

                    for (var n in _module.methods) {
                        this.load_method(_module.methods[n]);
                    }

                    for (var n in _module.variables) {
                        this.load_variable(_module.variables[n]);
                    }
                }
            };

            Module.prototype.load_script = function (script) {
                for (var n in script.modules) {
                    this.load_module(script.modules[n]);
                }

                for (var n in script.interfaces) {
                    this.load_interface(script.interfaces[n]);
                }

                for (var n in script.classes) {
                    this.load_class(script.classes[n]);
                }

                for (var n in script.methods) {
                    this.load_method(script.methods[n]);
                }

                for (var n in script.variables) {
                    this.load_variable(script.variables[n]);
                }
            };

            Module.prototype.dispose = function () {
                this.context = null;
            };
            return Module;
        })();
        modules.Module = Module;
    })(appex.modules || (appex.modules = {}));
    var modules = appex.modules;
})(appex || (appex = {}));
//@ sourceMappingURL=Module.js.map
//@ sourceMappingURL=CompilerResult.js.map
var appex;
(function (appex) {
    (function (compiler) {
        var Compiler = (function () {
            function Compiler() {
                this.worker = new appex.workers.Worker(this.kernel);
            }
            Compiler.prototype.compile = function (filename, callback) {
                this.worker.call(filename, callback);
            };

            Compiler.prototype.dispose = function () {
                this.worker.dispose();
            };

            Compiler.prototype.kernel = function (filename, callback) {
                var gather_diagnostics = function (units) {
                    var diagnostics = [];

                    units.forEach(function (unit) {
                        unit.diagnostics.forEach(function (diagnostic) {
                            diagnostics.push(diagnostic);
                        });
                    });

                    return diagnostics;
                };

                var typescript = require('typescript.api');

                var errors = [];

                typescript.resolve([filename], function (resolved) {
                    if (!typescript.check(resolved)) {
                        callback({
                            javascript: '',
                            scripts: null,
                            diagnostics: gather_diagnostics(resolved)
                        });

                        return;
                    }

                    typescript.compile(resolved, function (compiled) {
                        if (!typescript.check(compiled)) {
                            callback({
                                javascript: '',
                                scripts: null,
                                diagnostics: gather_diagnostics(compiled)
                            });

                            return;
                        }

                        var content = [];

                        var scripts = [];

                        var declaration = [];

                        compiled.forEach(function (unit) {
                            content.push(unit.content);

                            scripts.push(unit.script);
                        });

                        callback({
                            javascript: content.join('\n'),
                            scripts: scripts,
                            diagnostics: []
                        });
                    });
                });
            };
            return Compiler;
        })();
        compiler.Compiler = Compiler;
    })(appex.compiler || (appex.compiler = {}));
    var compiler = appex.compiler;
})(appex || (appex = {}));
//@ sourceMappingURL=Compiler.js.map
var appex;
(function (appex) {
    (function (workers) {
        var Waiter = (function () {
            function Waiter(messageid, delegate) {
                this.messageid = messageid;
                this.delegate = delegate;
            }
            return Waiter;
        })();
        workers.Waiter = Waiter;
    })(appex.workers || (appex.workers = {}));
    var workers = appex.workers;
})(appex || (appex = {}));
//@ sourceMappingURL=Waiter.js.map
var appex;
(function (appex) {
    (function (workers) {
        var Message = (function () {
            function Message() {
            }
            return Message;
        })();
        workers.Message = Message;
    })(appex.workers || (appex.workers = {}));
    var workers = appex.workers;
})(appex || (appex = {}));
//@ sourceMappingURL=Message.js.map
var appex;
(function (appex) {
    (function (workers) {
        var Worker = (function () {
            function Worker(delegate) {
                this.delegate = delegate;
                this.message_index = 0;

                this.waiters = new Array();

                var message = new workers.Message();

                message.messageid = 0;

                message.type = 'setup';

                message.body = {
                    code: this.delegate.toString(),
                    filename: process.mainModule.filename
                };

                this.child_process = node.child_process.fork(__dirname + '/kernel.js');

                var that = this;

                this.child_process.on('message', function (message) {
                    that.dispatch(message);
                });

                this.child_process.send(message, null);
            }
            Worker.prototype.dispatch = function (message) {
                for (var i = 0; i < this.waiters.length; i++) {
                    if (this.waiters[i].messageid == message.messageid) {
                        this.waiters[i].delegate(message.body);

                        this.waiters.splice(i, 1);

                        break;
                    }
                }
            };

            Worker.prototype.call = function (request, callback) {
                this.waiters.push(new workers.Waiter(this.message_index, callback));

                var message = new workers.Message();

                message.messageid = this.message_index;

                message.type = 'call';

                message.body = request;

                this.child_process.send(message, null);

                this.message_index = this.message_index + 1;
            };

            Worker.prototype.dispose = function () {
                try  {
                    this.child_process.kill();
                } catch (error) {
                }
            };
            return Worker;
        })();
        workers.Worker = Worker;
    })(appex.workers || (appex.workers = {}));
    var workers = appex.workers;
})(appex || (appex = {}));
//@ sourceMappingURL=Worker.js.map
//@ sourceMappingURL=interfaces.js.map
var node = {
    http: require('http'),
    https: require('https'),
    fs: require('fs'),
    vm: require('vm'),
    path: require('path'),
    child_process: require('child_process'),
    url: require('url'),
    util: require('util')
};
//@ sourceMappingURL=references.js.map
module.exports = function (options) {
    options = appex.web.NormalizeServerOptions(options);

    var server;

    if (options.devmode) {
        server = new appex.web.DevelopmentServer(options);
    } else {
        server = new appex.web.Server(options);
    }

    var facade = function (request, response, next) {
        server.handler(request, response, next);
    };

    for (var n in server) {
        facade[n] = server[n];
    }

    return facade;
};

module.exports.workers = appex.workers;

module.exports.compiler = appex.compiler;

module.exports.modules = appex.modules;

module.exports.web = appex.web;
//@ sourceMappingURL=index.js.map
